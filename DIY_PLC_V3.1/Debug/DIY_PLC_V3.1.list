
DIY_PLC_V3.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08005094  08005094  00015094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c0  080052c0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080052c0  080052c0  000152c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c8  080052c8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052cc  080052cc  000152cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080052d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  20000090  08005360  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08005360  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e4e  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003112  00000000  00000000  00033f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00037020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00037ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001996e  00000000  00000000  00038c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c89  00000000  00000000  000525b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c89f  00000000  00000000  0006723f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3ade  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb8  00000000  00000000  000f3b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	0800507c 	.word	0x0800507c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	0800507c 	.word	0x0800507c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_uldivmod>:
 8000f34:	b953      	cbnz	r3, 8000f4c <__aeabi_uldivmod+0x18>
 8000f36:	b94a      	cbnz	r2, 8000f4c <__aeabi_uldivmod+0x18>
 8000f38:	2900      	cmp	r1, #0
 8000f3a:	bf08      	it	eq
 8000f3c:	2800      	cmpeq	r0, #0
 8000f3e:	bf1c      	itt	ne
 8000f40:	f04f 31ff 	movne.w	r1, #4294967295
 8000f44:	f04f 30ff 	movne.w	r0, #4294967295
 8000f48:	f000 b96e 	b.w	8001228 <__aeabi_idiv0>
 8000f4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f54:	f000 f806 	bl	8000f64 <__udivmoddi4>
 8000f58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f60:	b004      	add	sp, #16
 8000f62:	4770      	bx	lr

08000f64 <__udivmoddi4>:
 8000f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f68:	9e08      	ldr	r6, [sp, #32]
 8000f6a:	460d      	mov	r5, r1
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	468e      	mov	lr, r1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f040 8083 	bne.w	800107c <__udivmoddi4+0x118>
 8000f76:	428a      	cmp	r2, r1
 8000f78:	4617      	mov	r7, r2
 8000f7a:	d947      	bls.n	800100c <__udivmoddi4+0xa8>
 8000f7c:	fab2 f382 	clz	r3, r2
 8000f80:	b14b      	cbz	r3, 8000f96 <__udivmoddi4+0x32>
 8000f82:	f1c3 0120 	rsb	r1, r3, #32
 8000f86:	fa05 fe03 	lsl.w	lr, r5, r3
 8000f8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8e:	409f      	lsls	r7, r3
 8000f90:	ea41 0e0e 	orr.w	lr, r1, lr
 8000f94:	409c      	lsls	r4, r3
 8000f96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f9a:	fbbe fcf8 	udiv	ip, lr, r8
 8000f9e:	fa1f f987 	uxth.w	r9, r7
 8000fa2:	fb08 e21c 	mls	r2, r8, ip, lr
 8000fa6:	fb0c f009 	mul.w	r0, ip, r9
 8000faa:	0c21      	lsrs	r1, r4, #16
 8000fac:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000fb0:	4290      	cmp	r0, r2
 8000fb2:	d90a      	bls.n	8000fca <__udivmoddi4+0x66>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000fba:	f080 8118 	bcs.w	80011ee <__udivmoddi4+0x28a>
 8000fbe:	4290      	cmp	r0, r2
 8000fc0:	f240 8115 	bls.w	80011ee <__udivmoddi4+0x28a>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	443a      	add	r2, r7
 8000fca:	1a12      	subs	r2, r2, r0
 8000fcc:	fbb2 f0f8 	udiv	r0, r2, r8
 8000fd0:	fb08 2210 	mls	r2, r8, r0, r2
 8000fd4:	fb00 f109 	mul.w	r1, r0, r9
 8000fd8:	b2a4      	uxth	r4, r4
 8000fda:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fde:	42a1      	cmp	r1, r4
 8000fe0:	d909      	bls.n	8000ff6 <__udivmoddi4+0x92>
 8000fe2:	193c      	adds	r4, r7, r4
 8000fe4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fe8:	f080 8103 	bcs.w	80011f2 <__udivmoddi4+0x28e>
 8000fec:	42a1      	cmp	r1, r4
 8000fee:	f240 8100 	bls.w	80011f2 <__udivmoddi4+0x28e>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	443c      	add	r4, r7
 8000ff6:	1a64      	subs	r4, r4, r1
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ffe:	b11e      	cbz	r6, 8001008 <__udivmoddi4+0xa4>
 8001000:	2200      	movs	r2, #0
 8001002:	40dc      	lsrs	r4, r3
 8001004:	e9c6 4200 	strd	r4, r2, [r6]
 8001008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100c:	b902      	cbnz	r2, 8001010 <__udivmoddi4+0xac>
 800100e:	deff      	udf	#255	; 0xff
 8001010:	fab2 f382 	clz	r3, r2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d14f      	bne.n	80010b8 <__udivmoddi4+0x154>
 8001018:	1a8d      	subs	r5, r1, r2
 800101a:	2101      	movs	r1, #1
 800101c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001020:	fa1f f882 	uxth.w	r8, r2
 8001024:	fbb5 fcfe 	udiv	ip, r5, lr
 8001028:	fb0e 551c 	mls	r5, lr, ip, r5
 800102c:	fb08 f00c 	mul.w	r0, r8, ip
 8001030:	0c22      	lsrs	r2, r4, #16
 8001032:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001036:	42a8      	cmp	r0, r5
 8001038:	d907      	bls.n	800104a <__udivmoddi4+0xe6>
 800103a:	197d      	adds	r5, r7, r5
 800103c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001040:	d202      	bcs.n	8001048 <__udivmoddi4+0xe4>
 8001042:	42a8      	cmp	r0, r5
 8001044:	f200 80e9 	bhi.w	800121a <__udivmoddi4+0x2b6>
 8001048:	4694      	mov	ip, r2
 800104a:	1a2d      	subs	r5, r5, r0
 800104c:	fbb5 f0fe 	udiv	r0, r5, lr
 8001050:	fb0e 5510 	mls	r5, lr, r0, r5
 8001054:	fb08 f800 	mul.w	r8, r8, r0
 8001058:	b2a4      	uxth	r4, r4
 800105a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800105e:	45a0      	cmp	r8, r4
 8001060:	d907      	bls.n	8001072 <__udivmoddi4+0x10e>
 8001062:	193c      	adds	r4, r7, r4
 8001064:	f100 32ff 	add.w	r2, r0, #4294967295
 8001068:	d202      	bcs.n	8001070 <__udivmoddi4+0x10c>
 800106a:	45a0      	cmp	r8, r4
 800106c:	f200 80d9 	bhi.w	8001222 <__udivmoddi4+0x2be>
 8001070:	4610      	mov	r0, r2
 8001072:	eba4 0408 	sub.w	r4, r4, r8
 8001076:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800107a:	e7c0      	b.n	8000ffe <__udivmoddi4+0x9a>
 800107c:	428b      	cmp	r3, r1
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x12e>
 8001080:	2e00      	cmp	r6, #0
 8001082:	f000 80b1 	beq.w	80011e8 <__udivmoddi4+0x284>
 8001086:	2100      	movs	r1, #0
 8001088:	e9c6 0500 	strd	r0, r5, [r6]
 800108c:	4608      	mov	r0, r1
 800108e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001092:	fab3 f183 	clz	r1, r3
 8001096:	2900      	cmp	r1, #0
 8001098:	d14b      	bne.n	8001132 <__udivmoddi4+0x1ce>
 800109a:	42ab      	cmp	r3, r5
 800109c:	d302      	bcc.n	80010a4 <__udivmoddi4+0x140>
 800109e:	4282      	cmp	r2, r0
 80010a0:	f200 80b9 	bhi.w	8001216 <__udivmoddi4+0x2b2>
 80010a4:	1a84      	subs	r4, r0, r2
 80010a6:	eb65 0303 	sbc.w	r3, r5, r3
 80010aa:	2001      	movs	r0, #1
 80010ac:	469e      	mov	lr, r3
 80010ae:	2e00      	cmp	r6, #0
 80010b0:	d0aa      	beq.n	8001008 <__udivmoddi4+0xa4>
 80010b2:	e9c6 4e00 	strd	r4, lr, [r6]
 80010b6:	e7a7      	b.n	8001008 <__udivmoddi4+0xa4>
 80010b8:	409f      	lsls	r7, r3
 80010ba:	f1c3 0220 	rsb	r2, r3, #32
 80010be:	40d1      	lsrs	r1, r2
 80010c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80010c8:	fa1f f887 	uxth.w	r8, r7
 80010cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80010d0:	fa24 f202 	lsr.w	r2, r4, r2
 80010d4:	409d      	lsls	r5, r3
 80010d6:	fb00 fc08 	mul.w	ip, r0, r8
 80010da:	432a      	orrs	r2, r5
 80010dc:	0c15      	lsrs	r5, r2, #16
 80010de:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80010e2:	45ac      	cmp	ip, r5
 80010e4:	fa04 f403 	lsl.w	r4, r4, r3
 80010e8:	d909      	bls.n	80010fe <__udivmoddi4+0x19a>
 80010ea:	197d      	adds	r5, r7, r5
 80010ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80010f0:	f080 808f 	bcs.w	8001212 <__udivmoddi4+0x2ae>
 80010f4:	45ac      	cmp	ip, r5
 80010f6:	f240 808c 	bls.w	8001212 <__udivmoddi4+0x2ae>
 80010fa:	3802      	subs	r0, #2
 80010fc:	443d      	add	r5, r7
 80010fe:	eba5 050c 	sub.w	r5, r5, ip
 8001102:	fbb5 f1fe 	udiv	r1, r5, lr
 8001106:	fb0e 5c11 	mls	ip, lr, r1, r5
 800110a:	fb01 f908 	mul.w	r9, r1, r8
 800110e:	b295      	uxth	r5, r2
 8001110:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001114:	45a9      	cmp	r9, r5
 8001116:	d907      	bls.n	8001128 <__udivmoddi4+0x1c4>
 8001118:	197d      	adds	r5, r7, r5
 800111a:	f101 32ff 	add.w	r2, r1, #4294967295
 800111e:	d274      	bcs.n	800120a <__udivmoddi4+0x2a6>
 8001120:	45a9      	cmp	r9, r5
 8001122:	d972      	bls.n	800120a <__udivmoddi4+0x2a6>
 8001124:	3902      	subs	r1, #2
 8001126:	443d      	add	r5, r7
 8001128:	eba5 0509 	sub.w	r5, r5, r9
 800112c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001130:	e778      	b.n	8001024 <__udivmoddi4+0xc0>
 8001132:	f1c1 0720 	rsb	r7, r1, #32
 8001136:	408b      	lsls	r3, r1
 8001138:	fa22 fc07 	lsr.w	ip, r2, r7
 800113c:	ea4c 0c03 	orr.w	ip, ip, r3
 8001140:	fa25 f407 	lsr.w	r4, r5, r7
 8001144:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001148:	fbb4 f9fe 	udiv	r9, r4, lr
 800114c:	fa1f f88c 	uxth.w	r8, ip
 8001150:	fb0e 4419 	mls	r4, lr, r9, r4
 8001154:	fa20 f307 	lsr.w	r3, r0, r7
 8001158:	fb09 fa08 	mul.w	sl, r9, r8
 800115c:	408d      	lsls	r5, r1
 800115e:	431d      	orrs	r5, r3
 8001160:	0c2b      	lsrs	r3, r5, #16
 8001162:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001166:	45a2      	cmp	sl, r4
 8001168:	fa02 f201 	lsl.w	r2, r2, r1
 800116c:	fa00 f301 	lsl.w	r3, r0, r1
 8001170:	d909      	bls.n	8001186 <__udivmoddi4+0x222>
 8001172:	eb1c 0404 	adds.w	r4, ip, r4
 8001176:	f109 30ff 	add.w	r0, r9, #4294967295
 800117a:	d248      	bcs.n	800120e <__udivmoddi4+0x2aa>
 800117c:	45a2      	cmp	sl, r4
 800117e:	d946      	bls.n	800120e <__udivmoddi4+0x2aa>
 8001180:	f1a9 0902 	sub.w	r9, r9, #2
 8001184:	4464      	add	r4, ip
 8001186:	eba4 040a 	sub.w	r4, r4, sl
 800118a:	fbb4 f0fe 	udiv	r0, r4, lr
 800118e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001192:	fb00 fa08 	mul.w	sl, r0, r8
 8001196:	b2ad      	uxth	r5, r5
 8001198:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800119c:	45a2      	cmp	sl, r4
 800119e:	d908      	bls.n	80011b2 <__udivmoddi4+0x24e>
 80011a0:	eb1c 0404 	adds.w	r4, ip, r4
 80011a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80011a8:	d22d      	bcs.n	8001206 <__udivmoddi4+0x2a2>
 80011aa:	45a2      	cmp	sl, r4
 80011ac:	d92b      	bls.n	8001206 <__udivmoddi4+0x2a2>
 80011ae:	3802      	subs	r0, #2
 80011b0:	4464      	add	r4, ip
 80011b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011b6:	fba0 8902 	umull	r8, r9, r0, r2
 80011ba:	eba4 040a 	sub.w	r4, r4, sl
 80011be:	454c      	cmp	r4, r9
 80011c0:	46c6      	mov	lr, r8
 80011c2:	464d      	mov	r5, r9
 80011c4:	d319      	bcc.n	80011fa <__udivmoddi4+0x296>
 80011c6:	d016      	beq.n	80011f6 <__udivmoddi4+0x292>
 80011c8:	b15e      	cbz	r6, 80011e2 <__udivmoddi4+0x27e>
 80011ca:	ebb3 020e 	subs.w	r2, r3, lr
 80011ce:	eb64 0405 	sbc.w	r4, r4, r5
 80011d2:	fa04 f707 	lsl.w	r7, r4, r7
 80011d6:	fa22 f301 	lsr.w	r3, r2, r1
 80011da:	431f      	orrs	r7, r3
 80011dc:	40cc      	lsrs	r4, r1
 80011de:	e9c6 7400 	strd	r7, r4, [r6]
 80011e2:	2100      	movs	r1, #0
 80011e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011e8:	4631      	mov	r1, r6
 80011ea:	4630      	mov	r0, r6
 80011ec:	e70c      	b.n	8001008 <__udivmoddi4+0xa4>
 80011ee:	468c      	mov	ip, r1
 80011f0:	e6eb      	b.n	8000fca <__udivmoddi4+0x66>
 80011f2:	4610      	mov	r0, r2
 80011f4:	e6ff      	b.n	8000ff6 <__udivmoddi4+0x92>
 80011f6:	4543      	cmp	r3, r8
 80011f8:	d2e6      	bcs.n	80011c8 <__udivmoddi4+0x264>
 80011fa:	ebb8 0e02 	subs.w	lr, r8, r2
 80011fe:	eb69 050c 	sbc.w	r5, r9, ip
 8001202:	3801      	subs	r0, #1
 8001204:	e7e0      	b.n	80011c8 <__udivmoddi4+0x264>
 8001206:	4628      	mov	r0, r5
 8001208:	e7d3      	b.n	80011b2 <__udivmoddi4+0x24e>
 800120a:	4611      	mov	r1, r2
 800120c:	e78c      	b.n	8001128 <__udivmoddi4+0x1c4>
 800120e:	4681      	mov	r9, r0
 8001210:	e7b9      	b.n	8001186 <__udivmoddi4+0x222>
 8001212:	4608      	mov	r0, r1
 8001214:	e773      	b.n	80010fe <__udivmoddi4+0x19a>
 8001216:	4608      	mov	r0, r1
 8001218:	e749      	b.n	80010ae <__udivmoddi4+0x14a>
 800121a:	f1ac 0c02 	sub.w	ip, ip, #2
 800121e:	443d      	add	r5, r7
 8001220:	e713      	b.n	800104a <__udivmoddi4+0xe6>
 8001222:	3802      	subs	r0, #2
 8001224:	443c      	add	r4, r7
 8001226:	e724      	b.n	8001072 <__udivmoddi4+0x10e>

08001228 <__aeabi_idiv0>:
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001230:	f001 fbda 	bl	80029e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001234:	f000 f80b 	bl	800124e <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001238:	f000 f8c4 	bl	80013c4 <MX_GPIO_Init>
	MX_TIM3_Init();
 800123c:	f000 f84c 	bl	80012d8 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8001240:	f000 f896 	bl	8001370 <MX_USART2_UART_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	setup();
 8001244:	f000 f91e 	bl	8001484 <setup>
	while (1) {
		loop();
 8001248:	f000 f95c 	bl	8001504 <loop>
 800124c:	e7fc      	b.n	8001248 <main+0x1c>

0800124e <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800124e:	b580      	push	{r7, lr}
 8001250:	b090      	sub	sp, #64	; 0x40
 8001252:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001254:	f107 0318 	add.w	r3, r7, #24
 8001258:	2228      	movs	r2, #40	; 0x28
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f003 ff05 	bl	800506c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001278:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127e:	2301      	movs	r3, #1
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001282:	2302      	movs	r3, #2
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800128c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001290:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4618      	mov	r0, r3
 8001298:	f001 ff64 	bl	8003164 <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x58>
		Error_Handler();
 80012a2:	f000 f9e7 	bl	8001674 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012aa:	2302      	movs	r3, #2
 80012ac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2102      	movs	r1, #2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 f9cf 	bl	8003664 <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x82>
		Error_Handler();
 80012cc:	f000 f9d2 	bl	8001674 <Error_Handler>
	}
}
 80012d0:	bf00      	nop
 80012d2:	3740      	adds	r7, #64	; 0x40
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_TIM3_Init+0x90>)
 80012f6:	4a1d      	ldr	r2, [pc, #116]	; (800136c <MX_TIM3_Init+0x94>)
 80012f8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 71;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_TIM3_Init+0x90>)
 80012fc:	2247      	movs	r2, #71	; 0x47
 80012fe:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_TIM3_Init+0x90>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 49;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_TIM3_Init+0x90>)
 8001308:	2231      	movs	r2, #49	; 0x31
 800130a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_TIM3_Init+0x90>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_TIM3_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001318:	4813      	ldr	r0, [pc, #76]	; (8001368 <MX_TIM3_Init+0x90>)
 800131a:	f002 fb31 	bl	8003980 <HAL_TIM_Base_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM3_Init+0x50>
		Error_Handler();
 8001324:	f000 f9a6 	bl	8001674 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_TIM3_Init+0x90>)
 8001336:	f002 fcfb 	bl	8003d30 <HAL_TIM_ConfigClockSource>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM3_Init+0x6c>
		Error_Handler();
 8001340:	f000 f998 	bl	8001674 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800134c:	463b      	mov	r3, r7
 800134e:	4619      	mov	r1, r3
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_TIM3_Init+0x90>)
 8001352:	f002 fed1 	bl	80040f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM3_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 800135c:	f000 f98a 	bl	8001674 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000230 	.word	0x20000230
 800136c:	40000400 	.word	0x40000400

08001370 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_USART2_UART_Init+0x50>)
 8001378:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800137c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001380:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 80013a8:	f002 ff16 	bl	80041d8 <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80013b2:	f000 f95f 	bl	8001674 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000278 	.word	0x20000278
 80013c0:	40004400 	.word	0x40004400

080013c4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <MX_GPIO_Init+0xb4>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a26      	ldr	r2, [pc, #152]	; (8001478 <MX_GPIO_Init+0xb4>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <MX_GPIO_Init+0xb4>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <MX_GPIO_Init+0xb4>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a20      	ldr	r2, [pc, #128]	; (8001478 <MX_GPIO_Init+0xb4>)
 80013f6:	f043 0320 	orr.w	r3, r3, #32
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <MX_GPIO_Init+0xb4>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0320 	and.w	r3, r3, #32
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_GPIO_Init+0xb4>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <MX_GPIO_Init+0xb4>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_GPIO_Init+0xb4>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001426:	4815      	ldr	r0, [pc, #84]	; (800147c <MX_GPIO_Init+0xb8>)
 8001428:	f001 fe84 	bl	8003134 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS485_RTS_GPIO_Port, RS485_RTS_Pin, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	2120      	movs	r1, #32
 8001430:	4813      	ldr	r0, [pc, #76]	; (8001480 <MX_GPIO_Init+0xbc>)
 8001432:	f001 fe7f 	bl	8003134 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2302      	movs	r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4619      	mov	r1, r3
 800144e:	480b      	ldr	r0, [pc, #44]	; (800147c <MX_GPIO_Init+0xb8>)
 8001450:	f001 fcec 	bl	8002e2c <HAL_GPIO_Init>

	/*Configure GPIO pin : RS485_RTS_Pin */
	GPIO_InitStruct.Pin = RS485_RTS_Pin;
 8001454:	2320      	movs	r3, #32
 8001456:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2302      	movs	r3, #2
 8001462:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RS485_RTS_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_GPIO_Init+0xbc>)
 800146c:	f001 fcde 	bl	8002e2c <HAL_GPIO_Init>

}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	40011000 	.word	0x40011000
 8001480:	40010800 	.word	0x40010800

08001484 <setup>:

/* USER CODE BEGIN 4 */
void setup(void) //Arduino function.
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af02      	add	r7, sp, #8

	eMBInit(MB_RTU, MODBUS_RTU_SLAVE_ADDRESS, &huart2,
			(ULONG) huart2.Init.BaudRate, &htim3); //MODBUS RTU SLAVE
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <setup+0x70>)
 800148c:	685b      	ldr	r3, [r3, #4]
	eMBInit(MB_RTU, MODBUS_RTU_SLAVE_ADDRESS, &huart2,
 800148e:	4a1a      	ldr	r2, [pc, #104]	; (80014f8 <setup+0x74>)
 8001490:	9200      	str	r2, [sp, #0]
 8001492:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <setup+0x70>)
 8001494:	2101      	movs	r1, #1
 8001496:	2000      	movs	r0, #0
 8001498:	f000 fcf2 	bl	8001e80 <eMBInit>
	eMBEnable(); //MODBUS RTU SLAVE
 800149c:	f000 fd6c 	bl	8001f78 <eMBEnable>

	GV.Reset = true;
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <setup+0x78>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
	//   -|millis          Ts_ms|->-
	//   -|Reset              Ts|->-
	//    |            Ts_ms_max|->-
	//    |             Uptime_s|->-
	//    +---------------------+
	DbTs1.millis = millis(); //millis() Arduino.
 80014a6:	f001 faf7 	bl	8002a98 <HAL_GetTick>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <setup+0x7c>)
 80014ae:	6013      	str	r3, [r2, #0]
	DbTs1.Reset = GV.Reset; //Сброс при перезагрузке.
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <setup+0x78>)
 80014b2:	781a      	ldrb	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <setup+0x7c>)
 80014b6:	711a      	strb	r2, [r3, #4]
	FbTs(&DbTs1); //Расчет времени скана.
 80014b8:	4811      	ldr	r0, [pc, #68]	; (8001500 <setup+0x7c>)
 80014ba:	f001 fa1d 	bl	80028f8 <FbTs>
	GV.Ts_ms = DbTs1.Ts_ms; //Шаг дискретизации по времени [мс].
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <setup+0x7c>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <setup+0x78>)
 80014c4:	6113      	str	r3, [r2, #16]
	GV.Ts = DbTs1.Ts; //Шаг дискретизации по времени [с].
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <setup+0x7c>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <setup+0x78>)
 80014cc:	60d3      	str	r3, [r2, #12]
	GV.Ts_ms_max = DbTs1.Ts_ms_max; //Максимальное время скана [мс].
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <setup+0x7c>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <setup+0x78>)
 80014d4:	6153      	str	r3, [r2, #20]
	GV.Uptime_s = DbTs1.Uptime_s; //Время в работе [мс].
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <setup+0x7c>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <setup+0x78>)
 80014dc:	6053      	str	r3, [r2, #4]

	FcTaskCyclic(GV.Reset, GV.Ts_ms); //PLC Task 1
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <setup+0x78>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4a06      	ldr	r2, [pc, #24]	; (80014fc <setup+0x78>)
 80014e4:	6912      	ldr	r2, [r2, #16]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f855 	bl	8001598 <FcTaskCyclic>
	return;
 80014ee:	bf00      	nop
}
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000278 	.word	0x20000278
 80014f8:	20000230 	.word	0x20000230
 80014fc:	200000b0 	.word	0x200000b0
 8001500:	20000180 	.word	0x20000180

08001504 <loop>:

void loop(void) //Arduino function.
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0

	eMBErrorCode retu;
	retu = eMBPoll(); //MODBUS RTU SLAVE
 800150a:	f000 fd51 	bl	8001fb0 <eMBPoll>
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
	if (retu == MB_ENOERR) {
		;
	} // IF OK

	GV.Reset = false;
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <loop+0x88>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
	//   -|millis          Ts_ms|->-
	//   -|Reset              Ts|->-
	//    |            Ts_ms_max|->-
	//    |             Uptime_s|->-
	//    +---------------------+
	DbTs1.millis = millis();	//millis() Arduino.
 8001518:	f001 fabe 	bl	8002a98 <HAL_GetTick>
 800151c:	4603      	mov	r3, r0
 800151e:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <loop+0x8c>)
 8001520:	6013      	str	r3, [r2, #0]
	DbTs1.Reset = GV.Reset;	//Сброс при перезагрузке.
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <loop+0x88>)
 8001524:	781a      	ldrb	r2, [r3, #0]
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <loop+0x8c>)
 8001528:	711a      	strb	r2, [r3, #4]
	FbTs(&DbTs1);	//Расчет времени скана.
 800152a:	4819      	ldr	r0, [pc, #100]	; (8001590 <loop+0x8c>)
 800152c:	f001 f9e4 	bl	80028f8 <FbTs>
	GV.Ts_ms = DbTs1.Ts_ms;	//Шаг дискретизации по времени [мс].
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <loop+0x8c>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4a15      	ldr	r2, [pc, #84]	; (800158c <loop+0x88>)
 8001536:	6113      	str	r3, [r2, #16]
	GV.Ts = DbTs1.Ts;	//Шаг дискретизации по времени [с].
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <loop+0x8c>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	4a13      	ldr	r2, [pc, #76]	; (800158c <loop+0x88>)
 800153e:	60d3      	str	r3, [r2, #12]
	GV.Ts_ms_max = DbTs1.Ts_ms_max;	//Максимальное время скана [мс].
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <loop+0x8c>)
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	4a11      	ldr	r2, [pc, #68]	; (800158c <loop+0x88>)
 8001546:	6153      	str	r3, [r2, #20]
	GV.Uptime_s = DbTs1.Uptime_s;	//Время в работе [мс].
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <loop+0x8c>)
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	4a0f      	ldr	r2, [pc, #60]	; (800158c <loop+0x88>)
 800154e:	6053      	str	r3, [r2, #4]

	//PLC Cyclic Task1
	FcTaskCyclic(GV.Reset, GV.Ts_ms);	//PLC Task 1
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <loop+0x88>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4a0d      	ldr	r2, [pc, #52]	; (800158c <loop+0x88>)
 8001556:	6912      	ldr	r2, [r2, #16]
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f81c 	bl	8001598 <FcTaskCyclic>

	//PLC digital output
	if (GV.Do1) {
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <loop+0x88>)
 8001562:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001566:	2b00      	cmp	r3, #0
 8001568:	d006      	beq.n	8001578 <loop+0x74>
		USER_LED_ON();
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001570:	4808      	ldr	r0, [pc, #32]	; (8001594 <loop+0x90>)
 8001572:	f001 fddf 	bl	8003134 <HAL_GPIO_WritePin>
	} else {
		USER_LED_OFF();
	}

	return;
 8001576:	e006      	b.n	8001586 <loop+0x82>
		USER_LED_OFF();
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <loop+0x90>)
 8001580:	f001 fdd8 	bl	8003134 <HAL_GPIO_WritePin>
	return;
 8001584:	bf00      	nop
}
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200000b0 	.word	0x200000b0
 8001590:	20000180 	.word	0x20000180
 8001594:	40011000 	.word	0x40011000

08001598 <FcTaskCyclic>:

void FcTaskCyclic(bool Reset, uint32_t Ts_ms) //PLC ST style logic.
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]

	//Время работы мс.
	MW[0] = 0x7fff bitand millis(); //0x7fff ограничение до 2**15-1
 80015a4:	f001 fa78 	bl	8002a98 <HAL_GetTick>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <FcTaskCyclic+0xc8>)
 80015b4:	801a      	strh	r2, [r3, #0]

	//Время скана мс.
	MW[1] = 0x7fff bitand GV.Ts_ms; //0x7fff ограничение до 2**15-1
 80015b6:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <FcTaskCyclic+0xcc>)
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <FcTaskCyclic+0xc8>)
 80015c4:	805a      	strh	r2, [r3, #2]

	//Максимальное время скана мс.
	MW[2] = 0x7fff bitand GV.Ts_ms_max; //0x7fff ограничение до 2**15-1
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <FcTaskCyclic+0xcc>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <FcTaskCyclic+0xc8>)
 80015d4:	809a      	strh	r2, [r3, #4]

	//Blink
	MW[3] = GV.Do1;
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <FcTaskCyclic+0xcc>)
 80015d8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <FcTaskCyclic+0xc8>)
 80015e0:	80da      	strh	r2, [r3, #6]

	//Тест на сложение.
	if (Reset) {
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <FcTaskCyclic+0x5e>
		MW[4] = -2;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <FcTaskCyclic+0xc8>)
 80015ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015ee:	811a      	strh	r2, [r3, #8]
		MW[5] = 6;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <FcTaskCyclic+0xc8>)
 80015f2:	2206      	movs	r2, #6
 80015f4:	815a      	strh	r2, [r3, #10]
	}
	MW[6] = MW[4] + MW[5];
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <FcTaskCyclic+0xc8>)
 80015f8:	891a      	ldrh	r2, [r3, #8]
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <FcTaskCyclic+0xc8>)
 80015fc:	895b      	ldrh	r3, [r3, #10]
 80015fe:	4413      	add	r3, r2
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <FcTaskCyclic+0xc8>)
 8001604:	819a      	strh	r2, [r3, #12]
	//   -|Time_on_ms        Out|->-
	//   -|Time_off_ms          |
	//   -|Ts_ms                |
	//   -|Reset                |
	//    +---------------------+
	DbBlink1.Time_on_ms = 500;	//Время импульса [мс].
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <FcTaskCyclic+0xd0>)
 8001608:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800160c:	601a      	str	r2, [r3, #0]
	DbBlink1.Time_off_ms = 500;	//Время паузы [мс].
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <FcTaskCyclic+0xd0>)
 8001610:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001614:	605a      	str	r2, [r3, #4]
	DbBlink1.Ts_ms = Ts_ms;	//Шаг дискретизации по времени [мс].
 8001616:	4a14      	ldr	r2, [pc, #80]	; (8001668 <FcTaskCyclic+0xd0>)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	6093      	str	r3, [r2, #8]
	DbBlink1.Reset = Reset;	//Сброс при перезагрузке.
 800161c:	4a12      	ldr	r2, [pc, #72]	; (8001668 <FcTaskCyclic+0xd0>)
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	7313      	strb	r3, [r2, #12]
	FbBlink(&DbBlink1);	//Мигалка.
 8001622:	4811      	ldr	r0, [pc, #68]	; (8001668 <FcTaskCyclic+0xd0>)
 8001624:	f001 f8d4 	bl	80027d0 <FbBlink>
	GV.Do1 = DbBlink1.Out;	//Мигающая лампочка.
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <FcTaskCyclic+0xd0>)
 800162a:	7b5a      	ldrb	r2, [r3, #13]
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <FcTaskCyclic+0xcc>)
 800162e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	//    | FbFilterA |
	// ->-|In      Out|->-
	//   -|Tf         |
	//   -|Ts         |
	//    +-----------+
	DbFilterA1.In = (float) DbBlink1.Out;	//Входной сигнал до фильтрации.
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <FcTaskCyclic+0xd0>)
 8001634:	7b5b      	ldrb	r3, [r3, #13]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fa5e 	bl	8000af8 <__aeabi_ui2f>
 800163c:	4603      	mov	r3, r0
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <FcTaskCyclic+0xd4>)
 8001640:	6013      	str	r3, [r2, #0]
	DbFilterA1.Tf = 0.15;	//Постоянная времени фильтра [с].
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <FcTaskCyclic+0xd4>)
 8001644:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <FcTaskCyclic+0xd8>)
 8001646:	605a      	str	r2, [r3, #4]
	DbFilterA1.Ts = GV.Ts;	//Шаг дискретизации по времени [с].
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <FcTaskCyclic+0xcc>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <FcTaskCyclic+0xd4>)
 800164e:	6093      	str	r3, [r2, #8]
	FbFilterA(&DbFilterA1);	//Фильтр апериодический.
 8001650:	4806      	ldr	r0, [pc, #24]	; (800166c <FcTaskCyclic+0xd4>)
 8001652:	f001 f917 	bl	8002884 <FbFilterA>
	//            = DbFilterA1.Out; //Выходной сигнал после фильтрации.

	return;
 8001656:	bf00      	nop
}
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200002c0 	.word	0x200002c0
 8001664:	200000b0 	.word	0x200000b0
 8001668:	200001a8 	.word	0x200001a8
 800166c:	200001c0 	.word	0x200001c0
 8001670:	3e19999a 	.word	0x3e19999a

08001674 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800167c:	e7fe      	b.n	800167c <Error_Handler+0x8>
	...

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_MspInit+0x5c>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	4a14      	ldr	r2, [pc, #80]	; (80016dc <HAL_MspInit+0x5c>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6193      	str	r3, [r2, #24]
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_MspInit+0x5c>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_MspInit+0x5c>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <HAL_MspInit+0x5c>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_MspInit+0x5c>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_MspInit+0x60>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_MspInit+0x60>)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010000 	.word	0x40010000

080016e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <HAL_TIM_Base_MspInit+0x44>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d113      	bne.n	800171e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_TIM_Base_MspInit+0x48>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a0c      	ldr	r2, [pc, #48]	; (800172c <HAL_TIM_Base_MspInit+0x48>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_TIM_Base_MspInit+0x48>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	201d      	movs	r0, #29
 8001714:	f001 faa1 	bl	8002c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001718:	201d      	movs	r0, #29
 800171a:	f001 faba 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40000400 	.word	0x40000400
 800172c:	40021000 	.word	0x40021000

08001730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <HAL_UART_MspInit+0x98>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d137      	bne.n	80017c0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_UART_MspInit+0x9c>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <HAL_UART_MspInit+0x9c>)
 8001756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175a:	61d3      	str	r3, [r2, #28]
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <HAL_UART_MspInit+0x9c>)
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_UART_MspInit+0x9c>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a17      	ldr	r2, [pc, #92]	; (80017cc <HAL_UART_MspInit+0x9c>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_UART_MspInit+0x9c>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001780:	2304      	movs	r3, #4
 8001782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	480f      	ldr	r0, [pc, #60]	; (80017d0 <HAL_UART_MspInit+0xa0>)
 8001794:	f001 fb4a 	bl	8002e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001798:	2308      	movs	r3, #8
 800179a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	4809      	ldr	r0, [pc, #36]	; (80017d0 <HAL_UART_MspInit+0xa0>)
 80017ac:	f001 fb3e 	bl	8002e2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	2026      	movs	r0, #38	; 0x26
 80017b6:	f001 fa50 	bl	8002c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017ba:	2026      	movs	r0, #38	; 0x26
 80017bc:	f001 fa69 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017c0:	bf00      	nop
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40004400 	.word	0x40004400
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010800 	.word	0x40010800

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <NMI_Handler+0x4>

080017da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <MemManage_Handler+0x4>

080017e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181a:	f001 f92b 	bl	8002a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <TIM3_IRQHandler+0x10>)
 800182a:	f002 f979 	bl	8003b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000230 	.word	0x20000230

08001838 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <USART2_IRQHandler+0x10>)
 800183e:	f002 fe9b 	bl	8004578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000278 	.word	0x20000278

0800184c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001858:	f7ff fff8 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800185e:	490c      	ldr	r1, [pc, #48]	; (8001890 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001860:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001874:	4c09      	ldr	r4, [pc, #36]	; (800189c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001882:	f003 fbc1 	bl	8005008 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001886:	f7ff fcd1 	bl	800122c <main>
  bx lr
 800188a:	4770      	bx	lr
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001894:	080052d0 	.word	0x080052d0
  ldr r2, =_sbss
 8001898:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800189c:	200004d8 	.word	0x200004d8

080018a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC1_2_IRQHandler>

080018a2 <eMBRegInputCB>:
 * @param usNRegs input register number
 *
 * @return result
 */
eMBErrorCode eMBRegInputCB(UCHAR *pucRegBuffer, USHORT usAddress,
		USHORT usNRegs) {
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	807b      	strh	r3, [r7, #2]
 80018ae:	4613      	mov	r3, r2
 80018b0:	803b      	strh	r3, [r7, #0]
        eStatus = MB_ENOREG;
    }

    return eStatus;
#else
	return MB_ENOREG;
 80018b2:	2301      	movs	r3, #1
#endif
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
	...

080018c0 <eMBRegHoldingCB>:
 * @param eMode read or write
 *
 * @return result
 */
eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress,
		USHORT usNRegs, eMBRegisterMode eMode) {
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	4603      	mov	r3, r0
 80018d0:	817b      	strh	r3, [r7, #10]
 80018d2:	460b      	mov	r3, r1
 80018d4:	813b      	strh	r3, [r7, #8]
 80018d6:	4613      	mov	r3, r2
 80018d8:	71fb      	strb	r3, [r7, #7]
#if S_REG_HOLDING_NREGS > 0
	eMBErrorCode eStatus = MB_ENOERR;
 80018da:	2300      	movs	r3, #0
 80018dc:	77fb      	strb	r3, [r7, #31]
	USHORT *pusRegHoldingBuf;
	USHORT REG_HOLDING_START;
	USHORT REG_HOLDING_NREGS;
	USHORT usRegHoldStart;

	pusRegHoldingBuf = usSRegHoldBuf;
 80018de:	4b39      	ldr	r3, [pc, #228]	; (80019c4 <eMBRegHoldingCB+0x104>)
 80018e0:	61bb      	str	r3, [r7, #24]
	REG_HOLDING_START = S_REG_HOLDING_START;
 80018e2:	2300      	movs	r3, #0
 80018e4:	82fb      	strh	r3, [r7, #22]
	REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
 80018e6:	237b      	movs	r3, #123	; 0x7b
 80018e8:	82bb      	strh	r3, [r7, #20]
	usRegHoldStart = usSRegHoldStart;
 80018ea:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <eMBRegHoldingCB+0x108>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	827b      	strh	r3, [r7, #18]

	/* it already plus one in modbus function method. */
	usAddress--;
 80018f0:	897b      	ldrh	r3, [r7, #10]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	817b      	strh	r3, [r7, #10]

	if ((usAddress >= REG_HOLDING_START)
 80018f6:	897a      	ldrh	r2, [r7, #10]
 80018f8:	8afb      	ldrh	r3, [r7, #22]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d359      	bcc.n	80019b2 <eMBRegHoldingCB+0xf2>
			&& (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS)) {
 80018fe:	897a      	ldrh	r2, [r7, #10]
 8001900:	893b      	ldrh	r3, [r7, #8]
 8001902:	441a      	add	r2, r3
 8001904:	8af9      	ldrh	r1, [r7, #22]
 8001906:	8abb      	ldrh	r3, [r7, #20]
 8001908:	440b      	add	r3, r1
 800190a:	429a      	cmp	r2, r3
 800190c:	dc51      	bgt.n	80019b2 <eMBRegHoldingCB+0xf2>
		iRegIndex = usAddress - usRegHoldStart;
 800190e:	897a      	ldrh	r2, [r7, #10]
 8001910:	8a7b      	ldrh	r3, [r7, #18]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	83bb      	strh	r3, [r7, #28]
		switch (eMode) {
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d01e      	beq.n	800195a <eMBRegHoldingCB+0x9a>
 800191c:	2b01      	cmp	r3, #1
 800191e:	d043      	beq.n	80019a8 <eMBRegHoldingCB+0xe8>
 8001920:	e049      	b.n	80019b6 <eMBRegHoldingCB+0xf6>
		/* read current register values from the protocol stack. */
		case MB_REG_READ:
			while (usNRegs > 0) {
				*pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 8001922:	8bbb      	ldrh	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4413      	add	r3, r2
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	b299      	uxth	r1, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	60fa      	str	r2, [r7, #12]
 8001936:	b2ca      	uxtb	r2, r1
 8001938:	701a      	strb	r2, [r3, #0]
				*pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 800193a:	8bbb      	ldrh	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4413      	add	r3, r2
 8001942:	8819      	ldrh	r1, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60fa      	str	r2, [r7, #12]
 800194a:	b2ca      	uxtb	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
				iRegIndex++;
 800194e:	8bbb      	ldrh	r3, [r7, #28]
 8001950:	3301      	adds	r3, #1
 8001952:	83bb      	strh	r3, [r7, #28]
				usNRegs--;
 8001954:	893b      	ldrh	r3, [r7, #8]
 8001956:	3b01      	subs	r3, #1
 8001958:	813b      	strh	r3, [r7, #8]
			while (usNRegs > 0) {
 800195a:	893b      	ldrh	r3, [r7, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1e0      	bne.n	8001922 <eMBRegHoldingCB+0x62>
			}
			break;
 8001960:	e026      	b.n	80019b0 <eMBRegHoldingCB+0xf0>

			/* write current register values with new values from the protocol stack. */
		case MB_REG_WRITE:
			while (usNRegs > 0) {
				pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	60fa      	str	r2, [r7, #12]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b29a      	uxth	r2, r3
 800196c:	8bbb      	ldrh	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	69b9      	ldr	r1, [r7, #24]
 8001972:	440b      	add	r3, r1
 8001974:	0212      	lsls	r2, r2, #8
 8001976:	b292      	uxth	r2, r2
 8001978:	801a      	strh	r2, [r3, #0]
				pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	60fa      	str	r2, [r7, #12]
 8001980:	7818      	ldrb	r0, [r3, #0]
 8001982:	8bbb      	ldrh	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4413      	add	r3, r2
 800198a:	8819      	ldrh	r1, [r3, #0]
 800198c:	b282      	uxth	r2, r0
 800198e:	8bbb      	ldrh	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	69b8      	ldr	r0, [r7, #24]
 8001994:	4403      	add	r3, r0
 8001996:	430a      	orrs	r2, r1
 8001998:	b292      	uxth	r2, r2
 800199a:	801a      	strh	r2, [r3, #0]
				iRegIndex++;
 800199c:	8bbb      	ldrh	r3, [r7, #28]
 800199e:	3301      	adds	r3, #1
 80019a0:	83bb      	strh	r3, [r7, #28]
				usNRegs--;
 80019a2:	893b      	ldrh	r3, [r7, #8]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	813b      	strh	r3, [r7, #8]
			while (usNRegs > 0) {
 80019a8:	893b      	ldrh	r3, [r7, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1d9      	bne.n	8001962 <eMBRegHoldingCB+0xa2>
			}
			break;
 80019ae:	bf00      	nop
		switch (eMode) {
 80019b0:	e001      	b.n	80019b6 <eMBRegHoldingCB+0xf6>
		}
	} else {
		eStatus = MB_ENOREG;
 80019b2:	2301      	movs	r3, #1
 80019b4:	77fb      	strb	r3, [r7, #31]
	}
	return eStatus;
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
#else
	return MB_ENOREG;
#endif
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3724      	adds	r7, #36	; 0x24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200002c0 	.word	0x200002c0
 80019c8:	200001d0 	.word	0x200001d0

080019cc <eMBFuncWriteHoldingRegister>:

/* ----------------------- Start implementation -----------------------------*/

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException eMBFuncWriteHoldingRegister(UCHAR *pucFrame, USHORT *usLen) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
	USHORT usRegAddress;
	eMBException eStatus = MB_EX_NONE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]
	eMBErrorCode eRegStatus;

	if (*usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN)) {
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d122      	bne.n	8001a28 <eMBFuncWriteHoldingRegister+0x5c>
		usRegAddress = (USHORT) (pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3301      	adds	r3, #1
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	81bb      	strh	r3, [r7, #12]
		usRegAddress |= (USHORT) (pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1]);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3302      	adds	r3, #2
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	89bb      	ldrh	r3, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	81bb      	strh	r3, [r7, #12]
		usRegAddress++;
 80019fc:	89bb      	ldrh	r3, [r7, #12]
 80019fe:	3301      	adds	r3, #1
 8001a00:	81bb      	strh	r3, [r7, #12]

		/* Make callback to update the value. */
		eRegStatus = eMBRegHoldingCB(&pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	1cd8      	adds	r0, r3, #3
 8001a06:	89b9      	ldrh	r1, [r7, #12]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f7ff ff58 	bl	80018c0 <eMBRegHoldingCB>
 8001a10:	4603      	mov	r3, r0
 8001a12:	72fb      	strb	r3, [r7, #11]
				usRegAddress, 1, MB_REG_WRITE);

		/* If an error occured convert it into a Modbus exception. */
		if (eRegStatus != MB_ENOERR) {
 8001a14:	7afb      	ldrb	r3, [r7, #11]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <eMBFuncWriteHoldingRegister+0x60>
			eStatus = prveMBError2Exception(eRegStatus);
 8001a1a:	7afb      	ldrb	r3, [r7, #11]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fa0d 	bl	8001e3c <prveMBError2Exception>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	e001      	b.n	8001a2c <eMBFuncWriteHoldingRegister+0x60>
		}
	} else {
		/* Can't be a valid request because the length is incorrect. */
		eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	73fb      	strb	r3, [r7, #15]
	}
	return eStatus;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException eMBFuncWriteMultipleHoldingRegister(UCHAR *pucFrame, USHORT *usLen) {
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
	USHORT usRegAddress;
	USHORT usRegCount;
	UCHAR ucRegByteCount;

	eMBException eStatus = MB_EX_NONE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
	eMBErrorCode eRegStatus;

	if (*usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN)) {
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	2b05      	cmp	r3, #5
 8001a4a:	d946      	bls.n	8001ada <eMBFuncWriteMultipleHoldingRegister+0xa4>
		usRegAddress = (USHORT) (pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	81bb      	strh	r3, [r7, #12]
		usRegAddress |= (USHORT) (pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1]);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	89bb      	ldrh	r3, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	81bb      	strh	r3, [r7, #12]
		usRegAddress++;
 8001a66:	89bb      	ldrh	r3, [r7, #12]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	81bb      	strh	r3, [r7, #12]

		usRegCount = (USHORT) (pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3303      	adds	r3, #3
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	817b      	strh	r3, [r7, #10]
		usRegCount |= (USHORT) (pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1]);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	897b      	ldrh	r3, [r7, #10]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	817b      	strh	r3, [r7, #10]

		ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	795b      	ldrb	r3, [r3, #5]
 8001a8a:	727b      	strb	r3, [r7, #9]

		if ((usRegCount >= 1)
 8001a8c:	897b      	ldrh	r3, [r7, #10]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d020      	beq.n	8001ad4 <eMBFuncWriteMultipleHoldingRegister+0x9e>
				&& (usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX)
 8001a92:	897b      	ldrh	r3, [r7, #10]
 8001a94:	2b78      	cmp	r3, #120	; 0x78
 8001a96:	d81d      	bhi.n	8001ad4 <eMBFuncWriteMultipleHoldingRegister+0x9e>
				&& (ucRegByteCount == (UCHAR) (2 * usRegCount))) {
 8001a98:	897b      	ldrh	r3, [r7, #10]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	7a7a      	ldrb	r2, [r7, #9]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d116      	bne.n	8001ad4 <eMBFuncWriteMultipleHoldingRegister+0x9e>
			/* Make callback to update the register values. */
			eRegStatus = eMBRegHoldingCB(
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	1d98      	adds	r0, r3, #6
 8001aaa:	897a      	ldrh	r2, [r7, #10]
 8001aac:	89b9      	ldrh	r1, [r7, #12]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f7ff ff06 	bl	80018c0 <eMBRegHoldingCB>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	723b      	strb	r3, [r7, #8]
					&pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF], usRegAddress,
					usRegCount, MB_REG_WRITE);

			/* If an error occured convert it into a Modbus exception. */
			if (eRegStatus != MB_ENOERR) {
 8001ab8:	7a3b      	ldrb	r3, [r7, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d006      	beq.n	8001acc <eMBFuncWriteMultipleHoldingRegister+0x96>
				eStatus = prveMBError2Exception(eRegStatus);
 8001abe:	7a3b      	ldrb	r3, [r7, #8]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f9bb 	bl	8001e3c <prveMBError2Exception>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	73fb      	strb	r3, [r7, #15]
			if (eRegStatus != MB_ENOERR) {
 8001aca:	e008      	b.n	8001ade <eMBFuncWriteMultipleHoldingRegister+0xa8>
			} else {
				/* The response contains the function code, the starting
				 * address and the quantity of registers. We reuse the
				 * old values in the buffer because they are still valid.
				 */
				*usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2205      	movs	r2, #5
 8001ad0:	801a      	strh	r2, [r3, #0]
			if (eRegStatus != MB_ENOERR) {
 8001ad2:	e004      	b.n	8001ade <eMBFuncWriteMultipleHoldingRegister+0xa8>
			}
		} else {
			eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	e001      	b.n	8001ade <eMBFuncWriteMultipleHoldingRegister+0xa8>
		}
	} else {
		/* Can't be a valid request because the length is incorrect. */
		eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001ada:	2303      	movs	r3, #3
 8001adc:	73fb      	strb	r3, [r7, #15]
	}
	return eStatus;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <eMBFuncReadHoldingRegister>:
#endif

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException eMBFuncReadHoldingRegister(UCHAR *pucFrame, USHORT *usLen) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	USHORT usRegAddress;
	USHORT usRegCount;
	UCHAR *pucFrameCur;

	eMBException eStatus = MB_EX_NONE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	75fb      	strb	r3, [r7, #23]
	eMBErrorCode eRegStatus;

	if (*usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN)) {
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d15f      	bne.n	8001bbe <eMBFuncReadHoldingRegister+0xd6>
		usRegAddress = (USHORT) (pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3301      	adds	r3, #1
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	82bb      	strh	r3, [r7, #20]
		usRegAddress |= (USHORT) (pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1]);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	8abb      	ldrh	r3, [r7, #20]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	82bb      	strh	r3, [r7, #20]
		usRegAddress++;
 8001b18:	8abb      	ldrh	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	82bb      	strh	r3, [r7, #20]

		usRegCount = (USHORT) (pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3303      	adds	r3, #3
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	827b      	strh	r3, [r7, #18]
		usRegCount |= (USHORT) (pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1]);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	8a7b      	ldrh	r3, [r7, #18]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	827b      	strh	r3, [r7, #18]

		/* Check if the number of registers to read is valid. If not
		 * return Modbus illegal data value exception. 
		 */
		if ((usRegCount >= 1) && (usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX)) {
 8001b38:	8a7b      	ldrh	r3, [r7, #18]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d03c      	beq.n	8001bb8 <eMBFuncReadHoldingRegister+0xd0>
 8001b3e:	8a7b      	ldrh	r3, [r7, #18]
 8001b40:	2b7d      	cmp	r3, #125	; 0x7d
 8001b42:	d839      	bhi.n	8001bb8 <eMBFuncReadHoldingRegister+0xd0>
			/* Set the current PDU data pointer to the beginning. */
			pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	60fb      	str	r3, [r7, #12]
			*usLen = MB_PDU_FUNC_OFF;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	801a      	strh	r2, [r3, #0]

			/* First byte contains the function code. */
			*pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	60fa      	str	r2, [r7, #12]
 8001b54:	2203      	movs	r2, #3
 8001b56:	701a      	strb	r2, [r3, #0]
			*usLen += 1;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	801a      	strh	r2, [r3, #0]

			/* Second byte in the response contain the number of bytes. */
			*pucFrameCur++ = (UCHAR) (usRegCount * 2);
 8001b64:	8a7b      	ldrh	r3, [r7, #18]
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1c59      	adds	r1, r3, #1
 8001b6c:	60f9      	str	r1, [r7, #12]
 8001b6e:	0052      	lsls	r2, r2, #1
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]
			*usLen += 1;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	801a      	strh	r2, [r3, #0]

			/* Make callback to fill the buffer. */
			eRegStatus = eMBRegHoldingCB(pucFrameCur, usRegAddress, usRegCount,
 8001b80:	8a7a      	ldrh	r2, [r7, #18]
 8001b82:	8ab9      	ldrh	r1, [r7, #20]
 8001b84:	2300      	movs	r3, #0
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f7ff fe9a 	bl	80018c0 <eMBRegHoldingCB>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	72fb      	strb	r3, [r7, #11]
					MB_REG_READ);
			/* If an error occured convert it into a Modbus exception. */
			if (eRegStatus != MB_ENOERR) {
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d006      	beq.n	8001ba4 <eMBFuncReadHoldingRegister+0xbc>
				eStatus = prveMBError2Exception(eRegStatus);
 8001b96:	7afb      	ldrb	r3, [r7, #11]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f94f 	bl	8001e3c <prveMBError2Exception>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	75fb      	strb	r3, [r7, #23]
			if (eRegStatus != MB_ENOERR) {
 8001ba2:	e00e      	b.n	8001bc2 <eMBFuncReadHoldingRegister+0xda>
			} else {
				*usLen += usRegCount * 2;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	881a      	ldrh	r2, [r3, #0]
 8001ba8:	8a7b      	ldrh	r3, [r7, #18]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	801a      	strh	r2, [r3, #0]
			if (eRegStatus != MB_ENOERR) {
 8001bb6:	e004      	b.n	8001bc2 <eMBFuncReadHoldingRegister+0xda>
			}
		} else {
			eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	75fb      	strb	r3, [r7, #23]
 8001bbc:	e001      	b.n	8001bc2 <eMBFuncReadHoldingRegister+0xda>
		}
	} else {
		/* Can't be a valid request because the length is incorrect. */
		eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	75fb      	strb	r3, [r7, #23]
	}
	return eStatus;
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <eMBFuncReadWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException eMBFuncReadWriteMultipleHoldingRegister(UCHAR *pucFrame,
		USHORT *usLen) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	USHORT usRegWriteAddress;
	USHORT usRegWriteCount;
	UCHAR ucRegWriteByteCount;
	UCHAR *pucFrameCur;

	eMBException eStatus = MB_EX_NONE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	75fb      	strb	r3, [r7, #23]
	eMBErrorCode eRegStatus;

	if (*usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN)) {
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	2b09      	cmp	r3, #9
 8001be0:	f240 8099 	bls.w	8001d16 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
		usRegReadAddress =
				(USHORT) (pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3301      	adds	r3, #1
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
		usRegReadAddress =
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	82bb      	strh	r3, [r7, #20]
		usRegReadAddress |=
				(USHORT) (pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1]);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b29a      	uxth	r2, r3
		usRegReadAddress |=
 8001bf8:	8abb      	ldrh	r3, [r7, #20]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	82bb      	strh	r3, [r7, #20]
		usRegReadAddress++;
 8001bfe:	8abb      	ldrh	r3, [r7, #20]
 8001c00:	3301      	adds	r3, #1
 8001c02:	82bb      	strh	r3, [r7, #20]

		usRegReadCount =
				(USHORT) (pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3303      	adds	r3, #3
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
		usRegReadCount =
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	827b      	strh	r3, [r7, #18]
		usRegReadCount |=
				(USHORT) (pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1]);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3304      	adds	r3, #4
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b29a      	uxth	r2, r3
		usRegReadCount |=
 8001c18:	8a7b      	ldrh	r3, [r7, #18]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	827b      	strh	r3, [r7, #18]

		usRegWriteAddress =
				(USHORT) (pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3305      	adds	r3, #5
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
		usRegWriteAddress =
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	823b      	strh	r3, [r7, #16]
		usRegWriteAddress |=
				(USHORT) (pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1]);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3306      	adds	r3, #6
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	b29a      	uxth	r2, r3
		usRegWriteAddress |=
 8001c32:	8a3b      	ldrh	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	823b      	strh	r3, [r7, #16]
		usRegWriteAddress++;
 8001c38:	8a3b      	ldrh	r3, [r7, #16]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	823b      	strh	r3, [r7, #16]

		usRegWriteCount =
				(USHORT) (pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3307      	adds	r3, #7
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b29b      	uxth	r3, r3
		usRegWriteCount =
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	81fb      	strh	r3, [r7, #14]
		usRegWriteCount |=
				(USHORT) (pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1]);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3308      	adds	r3, #8
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b29a      	uxth	r2, r3
		usRegWriteCount |=
 8001c52:	89fb      	ldrh	r3, [r7, #14]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	81fb      	strh	r3, [r7, #14]

		ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7a5b      	ldrb	r3, [r3, #9]
 8001c5c:	737b      	strb	r3, [r7, #13]

		if ((usRegReadCount >= 1) && (usRegReadCount <= 0x7D)
 8001c5e:	8a7b      	ldrh	r3, [r7, #18]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d056      	beq.n	8001d12 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8001c64:	8a7b      	ldrh	r3, [r7, #18]
 8001c66:	2b7d      	cmp	r3, #125	; 0x7d
 8001c68:	d853      	bhi.n	8001d12 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
				&& (usRegWriteCount >= 1) && (usRegWriteCount <= 0x79)
 8001c6a:	89fb      	ldrh	r3, [r7, #14]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d050      	beq.n	8001d12 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8001c70:	89fb      	ldrh	r3, [r7, #14]
 8001c72:	2b79      	cmp	r3, #121	; 0x79
 8001c74:	d84d      	bhi.n	8001d12 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
				&& ((2 * usRegWriteCount) == ucRegWriteByteCount)) {
 8001c76:	89fb      	ldrh	r3, [r7, #14]
 8001c78:	005a      	lsls	r2, r3, #1
 8001c7a:	7b7b      	ldrb	r3, [r7, #13]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d148      	bne.n	8001d12 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
			/* Make callback to update the register values. */
			eRegStatus = eMBRegHoldingCB(
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f103 000a 	add.w	r0, r3, #10
 8001c86:	89fa      	ldrh	r2, [r7, #14]
 8001c88:	8a39      	ldrh	r1, [r7, #16]
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f7ff fe18 	bl	80018c0 <eMBRegHoldingCB>
 8001c90:	4603      	mov	r3, r0
 8001c92:	75bb      	strb	r3, [r7, #22]
					&pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
					usRegWriteAddress, usRegWriteCount, MB_REG_WRITE);

			if (eRegStatus == MB_ENOERR) {
 8001c94:	7dbb      	ldrb	r3, [r7, #22]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d131      	bne.n	8001cfe <eMBFuncReadWriteMultipleHoldingRegister+0x132>
				/* Set the current PDU data pointer to the beginning. */
				pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60bb      	str	r3, [r7, #8]
				*usLen = MB_PDU_FUNC_OFF;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	801a      	strh	r2, [r3, #0]

				/* First byte contains the function code. */
				*pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	60ba      	str	r2, [r7, #8]
 8001caa:	2217      	movs	r2, #23
 8001cac:	701a      	strb	r2, [r3, #0]
				*usLen += 1;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	801a      	strh	r2, [r3, #0]

				/* Second byte in the response contain the number of bytes. */
				*pucFrameCur++ = (UCHAR) (usRegReadCount * 2);
 8001cba:	8a7b      	ldrh	r3, [r7, #18]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1c59      	adds	r1, r3, #1
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	0052      	lsls	r2, r2, #1
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]
				*usLen += 1;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	801a      	strh	r2, [r3, #0]

				/* Make the read callback. */
				eRegStatus = eMBRegHoldingCB(pucFrameCur, usRegReadAddress,
 8001cd6:	8a7a      	ldrh	r2, [r7, #18]
 8001cd8:	8ab9      	ldrh	r1, [r7, #20]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	68b8      	ldr	r0, [r7, #8]
 8001cde:	f7ff fdef 	bl	80018c0 <eMBRegHoldingCB>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	75bb      	strb	r3, [r7, #22]
						usRegReadCount, MB_REG_READ);
				if (eRegStatus == MB_ENOERR) {
 8001ce6:	7dbb      	ldrb	r3, [r7, #22]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d108      	bne.n	8001cfe <eMBFuncReadWriteMultipleHoldingRegister+0x132>
					*usLen += 2 * usRegReadCount;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	881a      	ldrh	r2, [r3, #0]
 8001cf0:	8a7b      	ldrh	r3, [r7, #18]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	801a      	strh	r2, [r3, #0]
				}
			}
			if (eRegStatus != MB_ENOERR) {
 8001cfe:	7dbb      	ldrb	r3, [r7, #22]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
				eStatus = prveMBError2Exception(eRegStatus);
 8001d04:	7dbb      	ldrb	r3, [r7, #22]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f898 	bl	8001e3c <prveMBError2Exception>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	75fb      	strb	r3, [r7, #23]
			if (eRegStatus != MB_ENOERR) {
 8001d10:	e001      	b.n	8001d16 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
			}
		} else {
			eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001d12:	2303      	movs	r3, #3
 8001d14:	75fb      	strb	r3, [r7, #23]
		}
	}
	return eStatus;
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <eMBFuncReadInputRegister>:
eMBException prveMBError2Exception(eMBErrorCode eErrorCode);

/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException eMBFuncReadInputRegister(UCHAR *pucFrame, USHORT *usLen) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
	USHORT usRegAddress;
	USHORT usRegCount;
	UCHAR *pucFrameCur;

	eMBException eStatus = MB_EX_NONE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]
	eMBErrorCode eRegStatus;

	if (*usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN)) {
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	d15f      	bne.n	8001df6 <eMBFuncReadInputRegister+0xd6>
		usRegAddress = (USHORT) (pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	82bb      	strh	r3, [r7, #20]
		usRegAddress |= (USHORT) (pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1]);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3302      	adds	r3, #2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	8abb      	ldrh	r3, [r7, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	82bb      	strh	r3, [r7, #20]
		usRegAddress++;
 8001d50:	8abb      	ldrh	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	82bb      	strh	r3, [r7, #20]

		usRegCount = (USHORT) (pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3303      	adds	r3, #3
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	827b      	strh	r3, [r7, #18]
		usRegCount |= (USHORT) (pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1]);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3304      	adds	r3, #4
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	8a7b      	ldrh	r3, [r7, #18]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	827b      	strh	r3, [r7, #18]

		/* Check if the number of registers to read is valid. If not
		 * return Modbus illegal data value exception. 
		 */
		if ((usRegCount >= 1) && (usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX)) {
 8001d70:	8a7b      	ldrh	r3, [r7, #18]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d03c      	beq.n	8001df0 <eMBFuncReadInputRegister+0xd0>
 8001d76:	8a7b      	ldrh	r3, [r7, #18]
 8001d78:	2b7c      	cmp	r3, #124	; 0x7c
 8001d7a:	d839      	bhi.n	8001df0 <eMBFuncReadInputRegister+0xd0>
			/* Set the current PDU data pointer to the beginning. */
			pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	60fb      	str	r3, [r7, #12]
			*usLen = MB_PDU_FUNC_OFF;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2200      	movs	r2, #0
 8001d84:	801a      	strh	r2, [r3, #0]

			/* First byte contains the function code. */
			*pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	60fa      	str	r2, [r7, #12]
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	701a      	strb	r2, [r3, #0]
			*usLen += 1;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	801a      	strh	r2, [r3, #0]

			/* Second byte in the response contain the number of bytes. */
			*pucFrameCur++ = (UCHAR) (usRegCount * 2);
 8001d9c:	8a7b      	ldrh	r3, [r7, #18]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1c59      	adds	r1, r3, #1
 8001da4:	60f9      	str	r1, [r7, #12]
 8001da6:	0052      	lsls	r2, r2, #1
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	701a      	strb	r2, [r3, #0]
			*usLen += 1;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	801a      	strh	r2, [r3, #0]

			eRegStatus = eMBRegInputCB(pucFrameCur, usRegAddress, usRegCount);
 8001db8:	8a7a      	ldrh	r2, [r7, #18]
 8001dba:	8abb      	ldrh	r3, [r7, #20]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f7ff fd6f 	bl	80018a2 <eMBRegInputCB>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	72fb      	strb	r3, [r7, #11]

			/* If an error occured convert it into a Modbus exception. */
			if (eRegStatus != MB_ENOERR) {
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <eMBFuncReadInputRegister+0xbc>
				eStatus = prveMBError2Exception(eRegStatus);
 8001dce:	7afb      	ldrb	r3, [r7, #11]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 f833 	bl	8001e3c <prveMBError2Exception>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	75fb      	strb	r3, [r7, #23]
			if (eRegStatus != MB_ENOERR) {
 8001dda:	e00e      	b.n	8001dfa <eMBFuncReadInputRegister+0xda>
			} else {
				*usLen += usRegCount * 2;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	881a      	ldrh	r2, [r3, #0]
 8001de0:	8a7b      	ldrh	r3, [r7, #18]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	801a      	strh	r2, [r3, #0]
			if (eRegStatus != MB_ENOERR) {
 8001dee:	e004      	b.n	8001dfa <eMBFuncReadInputRegister+0xda>
			}
		} else {
			eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001df0:	2303      	movs	r3, #3
 8001df2:	75fb      	strb	r3, [r7, #23]
 8001df4:	e001      	b.n	8001dfa <eMBFuncReadInputRegister+0xda>
		}
	} else {
		/* Can't be a valid read input register request because the length
		 * is incorrect. */
		eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8001df6:	2303      	movs	r3, #3
 8001df8:	75fb      	strb	r3, [r7, #23]
	}
	return eStatus;
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <eMBFuncReportSlaveID>:
		eStatus = MB_ENORES;
	}
	return eStatus;
}

eMBException eMBFuncReportSlaveID(UCHAR *pucFrame, USHORT *usLen) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
	memcpy(&pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0],
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3301      	adds	r3, #1
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <eMBFuncReportSlaveID+0x30>)
 8001e14:	8812      	ldrh	r2, [r2, #0]
 8001e16:	4908      	ldr	r1, [pc, #32]	; (8001e38 <eMBFuncReportSlaveID+0x34>)
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 f919 	bl	8005050 <memcpy>
			(size_t) usMBSlaveIDLen);
	*usLen = (USHORT) ( MB_PDU_DATA_OFF + usMBSlaveIDLen);
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <eMBFuncReportSlaveID+0x30>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	801a      	strh	r2, [r3, #0]
	return MB_EX_NONE;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200001f4 	.word	0x200001f4
 8001e38:	200001d4 	.word	0x200001d4

08001e3c <prveMBError2Exception>:
	usWordBuf &= usMask;

	return (UCHAR) usWordBuf;
}

eMBException prveMBError2Exception(eMBErrorCode eErrorCode) {
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
	eMBException eStatus;

	switch (eErrorCode) {
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	2b07      	cmp	r3, #7
 8001e4a:	d00c      	beq.n	8001e66 <prveMBError2Exception+0x2a>
 8001e4c:	2b07      	cmp	r3, #7
 8001e4e:	dc0d      	bgt.n	8001e6c <prveMBError2Exception+0x30>
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <prveMBError2Exception+0x1e>
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d003      	beq.n	8001e60 <prveMBError2Exception+0x24>
 8001e58:	e008      	b.n	8001e6c <prveMBError2Exception+0x30>
	case MB_ENOERR:
		eStatus = MB_EX_NONE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
		break;
 8001e5e:	e008      	b.n	8001e72 <prveMBError2Exception+0x36>

	case MB_ENOREG:
		eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8001e60:	2302      	movs	r3, #2
 8001e62:	73fb      	strb	r3, [r7, #15]
		break;
 8001e64:	e005      	b.n	8001e72 <prveMBError2Exception+0x36>

	case MB_ETIMEDOUT:
		eStatus = MB_EX_SLAVE_BUSY;
 8001e66:	2306      	movs	r3, #6
 8001e68:	73fb      	strb	r3, [r7, #15]
		break;
 8001e6a:	e002      	b.n	8001e72 <prveMBError2Exception+0x36>

	default:
		eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	73fb      	strb	r3, [r7, #15]
		break;
 8001e70:	bf00      	nop
	}

	return eStatus;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
	...

08001e80 <eMBInit>:
#endif
		};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode eMBInit(eMBMode eMode, UCHAR ucSlaveAddress, void *dHUART,
		ULONG ulBaudRate, void *dHTIM) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60ba      	str	r2, [r7, #8]
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	73bb      	strb	r3, [r7, #14]
	eMBErrorCode eStatus = MB_ENOERR;
 8001e92:	2300      	movs	r3, #0
 8001e94:	75fb      	strb	r3, [r7, #23]
	/* check preconditions */
	if ((ucSlaveAddress == MB_ADDRESS_BROADCAST)
 8001e96:	7bbb      	ldrb	r3, [r7, #14]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <eMBInit+0x28>
			|| (ucSlaveAddress < MB_ADDRESS_MIN)
 8001e9c:	7bbb      	ldrb	r3, [r7, #14]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <eMBInit+0x28>
			|| (ucSlaveAddress > MB_ADDRESS_MAX)) {
 8001ea2:	7bbb      	ldrb	r3, [r7, #14]
 8001ea4:	2bf7      	cmp	r3, #247	; 0xf7
 8001ea6:	d902      	bls.n	8001eae <eMBInit+0x2e>
		eStatus = MB_EINVAL;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	75fb      	strb	r3, [r7, #23]
 8001eac:	e03b      	b.n	8001f26 <eMBInit+0xa6>
	} else {
		ucMBAddress = ucSlaveAddress;
 8001eae:	4a20      	ldr	r2, [pc, #128]	; (8001f30 <eMBInit+0xb0>)
 8001eb0:	7bbb      	ldrb	r3, [r7, #14]
 8001eb2:	7013      	strb	r3, [r2, #0]

		switch (eMode) {
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d121      	bne.n	8001efe <eMBInit+0x7e>
#if MB_SLAVE_RTU_ENABLED > 0
		case MB_RTU:
			pvMBFrameStartCur = eMBRTUStart;
 8001eba:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <eMBInit+0xb4>)
 8001ebc:	4a1e      	ldr	r2, [pc, #120]	; (8001f38 <eMBInit+0xb8>)
 8001ebe:	601a      	str	r2, [r3, #0]
			pvMBFrameStopCur = eMBRTUStop;
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <eMBInit+0xbc>)
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <eMBInit+0xc0>)
 8001ec4:	601a      	str	r2, [r3, #0]
			peMBFrameSendCur = eMBRTUSend;
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <eMBInit+0xc4>)
 8001ec8:	4a1f      	ldr	r2, [pc, #124]	; (8001f48 <eMBInit+0xc8>)
 8001eca:	601a      	str	r2, [r3, #0]
			peMBFrameReceiveCur = eMBRTUReceive;
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <eMBInit+0xcc>)
 8001ece:	4a20      	ldr	r2, [pc, #128]	; (8001f50 <eMBInit+0xd0>)
 8001ed0:	601a      	str	r2, [r3, #0]
			pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <eMBInit+0xd4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
			pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <eMBInit+0xd8>)
 8001eda:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <eMBInit+0xdc>)
 8001edc:	601a      	str	r2, [r3, #0]
			pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <eMBInit+0xe0>)
 8001ee0:	4a20      	ldr	r2, [pc, #128]	; (8001f64 <eMBInit+0xe4>)
 8001ee2:	601a      	str	r2, [r3, #0]
			pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <eMBInit+0xe8>)
 8001ee6:	4a21      	ldr	r2, [pc, #132]	; (8001f6c <eMBInit+0xec>)
 8001ee8:	601a      	str	r2, [r3, #0]

			eStatus = eMBRTUInit(ucMBAddress, dHUART, ulBaudRate, dHTIM);
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <eMBInit+0xb0>)
 8001eec:	7818      	ldrb	r0, [r3, #0]
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	f000 fab8 	bl	8002468 <eMBRTUInit>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	75fb      	strb	r3, [r7, #23]
			break;
 8001efc:	e002      	b.n	8001f04 <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, dHUART, ulBaudRate, dHTIM );
            break;
#endif
		default:
			eStatus = MB_EINVAL;
 8001efe:	2302      	movs	r3, #2
 8001f00:	75fb      	strb	r3, [r7, #23]
			break;
 8001f02:	bf00      	nop
		}

		if (eStatus == MB_ENOERR) {
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10d      	bne.n	8001f26 <eMBInit+0xa6>
			if (!xMBPortEventInit()) {
 8001f0a:	f000 f93b 	bl	8002184 <xMBPortEventInit>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <eMBInit+0x9a>
				/* port dependent event module initalization failed. */
				eStatus = MB_EPORTERR;
 8001f14:	2303      	movs	r3, #3
 8001f16:	75fb      	strb	r3, [r7, #23]
 8001f18:	e005      	b.n	8001f26 <eMBInit+0xa6>
			} else {
				eMBCurrentMode = eMode;
 8001f1a:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <eMBInit+0xf0>)
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	7013      	strb	r3, [r2, #0]
				eMBState = STATE_DISABLED;
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <eMBInit+0xf4>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return eStatus;
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200001f6 	.word	0x200001f6
 8001f34:	200001fc 	.word	0x200001fc
 8001f38:	080024d9 	.word	0x080024d9
 8001f3c:	20000200 	.word	0x20000200
 8001f40:	08002501 	.word	0x08002501
 8001f44:	200001f8 	.word	0x200001f8
 8001f48:	0800258d 	.word	0x0800258d
 8001f4c:	20000204 	.word	0x20000204
 8001f50:	0800251d 	.word	0x0800251d
 8001f54:	20000208 	.word	0x20000208
 8001f58:	200003c0 	.word	0x200003c0
 8001f5c:	08002655 	.word	0x08002655
 8001f60:	200003b8 	.word	0x200003b8
 8001f64:	08002701 	.word	0x08002701
 8001f68:	200003bc 	.word	0x200003bc
 8001f6c:	08002779 	.word	0x08002779
 8001f70:	200001f7 	.word	0x200001f7
 8001f74:	20000004 	.word	0x20000004

08001f78 <eMBEnable>:
		eStatus = MB_EILLSTATE;
	}
	return eStatus;
}

eMBErrorCode eMBEnable(void) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
	eMBErrorCode eStatus = MB_ENOERR;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	71fb      	strb	r3, [r7, #7]

	if (eMBState == STATE_DISABLED) {
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <eMBEnable+0x30>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d106      	bne.n	8001f98 <eMBEnable+0x20>
		/* Activate the protocol stack. */
		pvMBFrameStartCur();
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <eMBEnable+0x34>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4798      	blx	r3
		eMBState = STATE_ENABLED;
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <eMBEnable+0x30>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	e001      	b.n	8001f9c <eMBEnable+0x24>
	} else {
		eStatus = MB_EILLSTATE;
 8001f98:	2306      	movs	r3, #6
 8001f9a:	71fb      	strb	r3, [r7, #7]
	}
	return eStatus;
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000004 	.word	0x20000004
 8001fac:	200001fc 	.word	0x200001fc

08001fb0 <eMBPoll>:
		eStatus = MB_EILLSTATE;
	}
	return eStatus;
}

eMBErrorCode eMBPoll(void) {
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
	static UCHAR ucFunctionCode;
	static USHORT usLength;
	static eMBException eException;

	int i;
	eMBErrorCode eStatus = MB_ENOERR;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	70fb      	strb	r3, [r7, #3]
	eMBEventType eEvent;

	/* Check if the protocol stack is ready. */
	if (eMBState != STATE_ENABLED) {
 8001fba:	4b56      	ldr	r3, [pc, #344]	; (8002114 <eMBPoll+0x164>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <eMBPoll+0x16>
		return MB_EILLSTATE;
 8001fc2:	2306      	movs	r3, #6
 8001fc4:	e0a1      	b.n	800210a <eMBPoll+0x15a>
	}

	/* Check if there is a event available. If not return control to caller.
	 * Otherwise we will handle the event. */
	if (xMBPortEventGet(&eEvent) == TRUE) {
 8001fc6:	1cbb      	adds	r3, r7, #2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 f8fd 	bl	80021c8 <xMBPortEventGet>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	f040 8094 	bne.w	80020fe <eMBPoll+0x14e>
		switch (eEvent) {
 8001fd6:	78bb      	ldrb	r3, [r7, #2]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	2b07      	cmp	r3, #7
 8001fdc:	f200 8094 	bhi.w	8002108 <eMBPoll+0x158>
 8001fe0:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <eMBPoll+0x38>)
 8001fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe6:	bf00      	nop
 8001fe8:	08002109 	.word	0x08002109
 8001fec:	08002009 	.word	0x08002009
 8001ff0:	08002109 	.word	0x08002109
 8001ff4:	0800203b 	.word	0x0800203b
 8001ff8:	08002109 	.word	0x08002109
 8001ffc:	08002109 	.word	0x08002109
 8002000:	08002109 	.word	0x08002109
 8002004:	08002109 	.word	0x08002109
		case EV_READY:
			break;

		case EV_FRAME_RECEIVED:
			eStatus = peMBFrameReceiveCur(&ucRcvAddress, &ucMBFrame, &usLength);
 8002008:	4b43      	ldr	r3, [pc, #268]	; (8002118 <eMBPoll+0x168>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a43      	ldr	r2, [pc, #268]	; (800211c <eMBPoll+0x16c>)
 800200e:	4944      	ldr	r1, [pc, #272]	; (8002120 <eMBPoll+0x170>)
 8002010:	4844      	ldr	r0, [pc, #272]	; (8002124 <eMBPoll+0x174>)
 8002012:	4798      	blx	r3
 8002014:	4603      	mov	r3, r0
 8002016:	70fb      	strb	r3, [r7, #3]
			if (eStatus == MB_ENOERR) {
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d171      	bne.n	8002102 <eMBPoll+0x152>
				/* Check if the frame is for us. If not ignore the frame. */
				if ((ucRcvAddress == ucMBAddress)
 800201e:	4b41      	ldr	r3, [pc, #260]	; (8002124 <eMBPoll+0x174>)
 8002020:	781a      	ldrb	r2, [r3, #0]
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <eMBPoll+0x178>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d003      	beq.n	8002032 <eMBPoll+0x82>
						|| (ucRcvAddress == MB_ADDRESS_BROADCAST)) {
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <eMBPoll+0x174>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d167      	bne.n	8002102 <eMBPoll+0x152>
					(void) xMBPortEventPost(EV_EXECUTE);
 8002032:	2004      	movs	r0, #4
 8002034:	f000 f8b2 	bl	800219c <xMBPortEventPost>
				}
			}
			break;
 8002038:	e063      	b.n	8002102 <eMBPoll+0x152>

		case EV_EXECUTE:
			ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800203a:	4b39      	ldr	r3, [pc, #228]	; (8002120 <eMBPoll+0x170>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	781a      	ldrb	r2, [r3, #0]
 8002040:	4b3a      	ldr	r3, [pc, #232]	; (800212c <eMBPoll+0x17c>)
 8002042:	701a      	strb	r2, [r3, #0]
			eException = MB_EX_ILLEGAL_FUNCTION;
 8002044:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <eMBPoll+0x180>)
 8002046:	2201      	movs	r2, #1
 8002048:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++) {
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	e01f      	b.n	8002090 <eMBPoll+0xe0>
				/* No more function handlers registered. Abort. */
				if (xFuncHandlers[i].ucFunctionCode == 0) {
 8002050:	4a38      	ldr	r2, [pc, #224]	; (8002134 <eMBPoll+0x184>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01d      	beq.n	8002098 <eMBPoll+0xe8>
					break;
				} else if (xFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
 800205c:	4a35      	ldr	r2, [pc, #212]	; (8002134 <eMBPoll+0x184>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8002064:	4b31      	ldr	r3, [pc, #196]	; (800212c <eMBPoll+0x17c>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d10e      	bne.n	800208a <eMBPoll+0xda>
					eException = xFuncHandlers[i].pxHandler(ucMBFrame,
 800206c:	4a31      	ldr	r2, [pc, #196]	; (8002134 <eMBPoll+0x184>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4a2a      	ldr	r2, [pc, #168]	; (8002120 <eMBPoll+0x170>)
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	4928      	ldr	r1, [pc, #160]	; (800211c <eMBPoll+0x16c>)
 800207c:	4610      	mov	r0, r2
 800207e:	4798      	blx	r3
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <eMBPoll+0x180>)
 8002086:	701a      	strb	r2, [r3, #0]
							&usLength);
					break;
 8002088:	e007      	b.n	800209a <eMBPoll+0xea>
			for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++) {
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3301      	adds	r3, #1
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b0f      	cmp	r3, #15
 8002094:	dddc      	ble.n	8002050 <eMBPoll+0xa0>
 8002096:	e000      	b.n	800209a <eMBPoll+0xea>
					break;
 8002098:	bf00      	nop
				}
			}

			/* If the request was not sent to the broadcast address we
			 * return a reply. */
			if (ucRcvAddress != MB_ADDRESS_BROADCAST) {
 800209a:	4b22      	ldr	r3, [pc, #136]	; (8002124 <eMBPoll+0x174>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d031      	beq.n	8002106 <eMBPoll+0x156>
				if (eException != MB_EX_NONE) {
 80020a2:	4b23      	ldr	r3, [pc, #140]	; (8002130 <eMBPoll+0x180>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d01d      	beq.n	80020e6 <eMBPoll+0x136>
					/* An exception occured. Build an error frame. */
					usLength = 0;
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <eMBPoll+0x16c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	801a      	strh	r2, [r3, #0]
					ucMBFrame[usLength++] = (UCHAR) (ucFunctionCode
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <eMBPoll+0x17c>)
 80020b2:	781a      	ldrb	r2, [r3, #0]
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <eMBPoll+0x170>)
 80020b6:	6819      	ldr	r1, [r3, #0]
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <eMBPoll+0x16c>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	1c58      	adds	r0, r3, #1
 80020be:	b284      	uxth	r4, r0
 80020c0:	4816      	ldr	r0, [pc, #88]	; (800211c <eMBPoll+0x16c>)
 80020c2:	8004      	strh	r4, [r0, #0]
 80020c4:	440b      	add	r3, r1
 80020c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]
							| MB_FUNC_ERROR);
					ucMBFrame[usLength++] = eException;
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <eMBPoll+0x170>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <eMBPoll+0x16c>)
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	1c59      	adds	r1, r3, #1
 80020d8:	b288      	uxth	r0, r1
 80020da:	4910      	ldr	r1, [pc, #64]	; (800211c <eMBPoll+0x16c>)
 80020dc:	8008      	strh	r0, [r1, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	4a13      	ldr	r2, [pc, #76]	; (8002130 <eMBPoll+0x180>)
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	701a      	strb	r2, [r3, #0]
				}
				eStatus = peMBFrameSendCur(ucMBAddress, ucMBFrame, usLength);
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <eMBPoll+0x188>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <eMBPoll+0x178>)
 80020ec:	7810      	ldrb	r0, [r2, #0]
 80020ee:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <eMBPoll+0x170>)
 80020f0:	6811      	ldr	r1, [r2, #0]
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <eMBPoll+0x16c>)
 80020f4:	8812      	ldrh	r2, [r2, #0]
 80020f6:	4798      	blx	r3
 80020f8:	4603      	mov	r3, r0
 80020fa:	70fb      	strb	r3, [r7, #3]
			}
			break;
 80020fc:	e003      	b.n	8002106 <eMBPoll+0x156>

		case EV_FRAME_SENT:
			break;
		}
	}
 80020fe:	bf00      	nop
 8002100:	e002      	b.n	8002108 <eMBPoll+0x158>
			break;
 8002102:	bf00      	nop
 8002104:	e000      	b.n	8002108 <eMBPoll+0x158>
			break;
 8002106:	bf00      	nop
	return MB_ENOERR;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}
 8002112:	bf00      	nop
 8002114:	20000004 	.word	0x20000004
 8002118:	20000204 	.word	0x20000204
 800211c:	20000214 	.word	0x20000214
 8002120:	20000210 	.word	0x20000210
 8002124:	2000020c 	.word	0x2000020c
 8002128:	200001f6 	.word	0x200001f6
 800212c:	20000216 	.word	0x20000216
 8002130:	20000217 	.word	0x20000217
 8002134:	20000008 	.word	0x20000008
 8002138:	200001f8 	.word	0x200001f8

0800213c <__critical_enter>:
#include "portcritical.h"
#include "main.h"

static uint32_t lock_count = 0;

void __critical_enter(void) {
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop
	__disable_irq();
	lock_count++;
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <__critical_enter+0x1c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	3301      	adds	r3, #1
 800214a:	4a03      	ldr	r2, [pc, #12]	; (8002158 <__critical_enter+0x1c>)
 800214c:	6013      	str	r3, [r2, #0]
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000218 	.word	0x20000218

0800215c <__critical_exit>:

void __critical_exit(void) {
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	lock_count--;
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <__critical_exit+0x24>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3b01      	subs	r3, #1
 8002166:	4a06      	ldr	r2, [pc, #24]	; (8002180 <__critical_exit+0x24>)
 8002168:	6013      	str	r3, [r2, #0]
	if (lock_count == 0)
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <__critical_exit+0x24>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <__critical_exit+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8002172:	b662      	cpsie	i
}
 8002174:	bf00      	nop
		__enable_irq();
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000218 	.word	0x20000218

08002184 <xMBPortEventInit>:
/* ----------------------- Variables ----------------------------------------*/
static eMBEventType eQueuedEvent;
static BOOL xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortEventInit(void) {
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
	xEventInQueue = FALSE;
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <xMBPortEventInit+0x14>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
	return TRUE;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	2000021d 	.word	0x2000021d

0800219c <xMBPortEventPost>:

BOOL xMBPortEventPost(eMBEventType eEvent) {
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
	xEventInQueue = TRUE;
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <xMBPortEventPost+0x24>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
	eQueuedEvent = eEvent;
 80021ac:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <xMBPortEventPost+0x28>)
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	7013      	strb	r3, [r2, #0]
	return TRUE;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	2000021d 	.word	0x2000021d
 80021c4:	2000021c 	.word	0x2000021c

080021c8 <xMBPortEventGet>:

BOOL xMBPortEventGet(eMBEventType *eEvent) {
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	BOOL xEventHappened = FALSE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]

	if (xEventInQueue) {
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <xMBPortEventGet+0x34>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <xMBPortEventGet+0x26>
		*eEvent = eQueuedEvent;
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <xMBPortEventGet+0x38>)
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	701a      	strb	r2, [r3, #0]
		xEventInQueue = FALSE;
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <xMBPortEventGet+0x34>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
		xEventHappened = TRUE;
 80021ea:	2301      	movs	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
	}
	return xEventHappened;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	2000021d 	.word	0x2000021d
 8002200:	2000021c 	.word	0x2000021c

08002204 <xMBPortSerialInit>:
/* ----------------------- User defenitions ---------------------------------*/
#define RS485_RTS_LOW	HAL_GPIO_WritePin(RS485_RTS_GPIO_Port, RS485_RTS_Pin, GPIO_PIN_RESET)
#define RS485_RTS_HIGH 	HAL_GPIO_WritePin(RS485_RTS_GPIO_Port, RS485_RTS_Pin, GPIO_PIN_SET)

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortSerialInit(void *dHUART, ULONG ulBaudRate, void *dHTIM) {
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
	uart = (UART_HandleTypeDef*) dHUART;
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <xMBPortSerialInit+0x20>)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6013      	str	r3, [r2, #0]

	return TRUE;
 8002216:	2301      	movs	r3, #1
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	200003cc 	.word	0x200003cc

08002228 <vMBPortSerialEnable>:

void vMBPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	460a      	mov	r2, r1
 8002232:	71fb      	strb	r3, [r7, #7]
 8002234:	4613      	mov	r3, r2
 8002236:	71bb      	strb	r3, [r7, #6]
	if (xRxEnable) {
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00c      	beq.n	8002258 <vMBPortSerialEnable+0x30>
		RS485_RTS_LOW;
 800223e:	2200      	movs	r2, #0
 8002240:	2120      	movs	r1, #32
 8002242:	4812      	ldr	r0, [pc, #72]	; (800228c <vMBPortSerialEnable+0x64>)
 8002244:	f000 ff76 	bl	8003134 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(uart, &singlechar, 1);
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <vMBPortSerialEnable+0x68>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2201      	movs	r2, #1
 800224e:	4911      	ldr	r1, [pc, #68]	; (8002294 <vMBPortSerialEnable+0x6c>)
 8002250:	4618      	mov	r0, r3
 8002252:	f002 f846 	bl	80042e2 <HAL_UART_Receive_IT>
 8002256:	e004      	b.n	8002262 <vMBPortSerialEnable+0x3a>
	} else {
		HAL_UART_AbortReceive_IT(uart);
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <vMBPortSerialEnable+0x68>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f002 f8d9 	bl	8004414 <HAL_UART_AbortReceive_IT>
	}

	if (xTxEnable) {
 8002262:	79bb      	ldrb	r3, [r7, #6]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <vMBPortSerialEnable+0x52>
		RS485_RTS_HIGH;
 8002268:	2201      	movs	r2, #1
 800226a:	2120      	movs	r1, #32
 800226c:	4807      	ldr	r0, [pc, #28]	; (800228c <vMBPortSerialEnable+0x64>)
 800226e:	f000 ff61 	bl	8003134 <HAL_GPIO_WritePin>
		pxMBFrameCBTransmitterEmpty();
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <vMBPortSerialEnable+0x70>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4798      	blx	r3
	} else {
		HAL_UART_AbortTransmit_IT(uart);
	}
}
 8002278:	e004      	b.n	8002284 <vMBPortSerialEnable+0x5c>
		HAL_UART_AbortTransmit_IT(uart);
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <vMBPortSerialEnable+0x68>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f002 f854 	bl	800432c <HAL_UART_AbortTransmit_IT>
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40010800 	.word	0x40010800
 8002290:	200003cc 	.word	0x200003cc
 8002294:	2000021e 	.word	0x2000021e
 8002298:	200003b8 	.word	0x200003b8

0800229c <xMBPortSerialPutBytes>:
BOOL xMBPortSerialPutByte(CHAR ucByte) {
	HAL_UART_Transmit_IT(uart, (uint8_t*) &ucByte, 1);
	return TRUE;
}

BOOL xMBPortSerialPutBytes(volatile UCHAR *ucByte, USHORT usSize) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(uart, (uint8_t*) ucByte, usSize);
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <xMBPortSerialPutBytes+0x24>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	887a      	ldrh	r2, [r7, #2]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f001 ffe1 	bl	8004278 <HAL_UART_Transmit_IT>
	return TRUE;
 80022b6:	2301      	movs	r3, #1
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200003cc 	.word	0x200003cc

080022c4 <xMBPortSerialGetByte>:

BOOL xMBPortSerialGetByte(CHAR *pucByte) {
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	*pucByte = (uint8_t) (singlechar);
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <xMBPortSerialGetByte+0x1c>)
 80022ce:	781a      	ldrb	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	701a      	strb	r2, [r3, #0]
	return TRUE;
 80022d4:	2301      	movs	r3, #1
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	2000021e 	.word	0x2000021e

080022e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a08      	ldr	r2, [pc, #32]	; (8002314 <HAL_UART_RxCpltCallback+0x30>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d109      	bne.n	800230a <HAL_UART_RxCpltCallback+0x26>
		pxMBFrameCBByteReceived();
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_UART_RxCpltCallback+0x34>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4798      	blx	r3
		HAL_UART_Receive_IT(uart, &singlechar, 1);
 80022fc:	4b07      	ldr	r3, [pc, #28]	; (800231c <HAL_UART_RxCpltCallback+0x38>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2201      	movs	r2, #1
 8002302:	4907      	ldr	r1, [pc, #28]	; (8002320 <HAL_UART_RxCpltCallback+0x3c>)
 8002304:	4618      	mov	r0, r3
 8002306:	f001 ffec 	bl	80042e2 <HAL_UART_Receive_IT>
	}
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40004400 	.word	0x40004400
 8002318:	200003c0 	.word	0x200003c0
 800231c:	200003cc 	.word	0x200003cc
 8002320:	2000021e 	.word	0x2000021e

08002324 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_UART_TxCpltCallback+0x20>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d102      	bne.n	800233c <HAL_UART_TxCpltCallback+0x18>
		pxMBFrameCBTransmitterEmpty();
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <HAL_UART_TxCpltCallback+0x24>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4798      	blx	r3
	}
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40004400 	.word	0x40004400
 8002348:	200003b8 	.word	0x200003b8

0800234c <xMBPortTimersInit>:
TIM_HandleTypeDef *tim;
static uint16_t timeout = 0;
volatile uint16_t counter = 0;

/* ----------------------- Start implementation -----------------------------*/
BOOL xMBPortTimersInit(USHORT usTim1Timerout50us, void *dHTIM) {
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	80fb      	strh	r3, [r7, #6]
	tim = (TIM_HandleTypeDef*) dHTIM;
 8002358:	4a05      	ldr	r2, [pc, #20]	; (8002370 <xMBPortTimersInit+0x24>)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6013      	str	r3, [r2, #0]
	timeout = usTim1Timerout50us;
 800235e:	4a05      	ldr	r2, [pc, #20]	; (8002374 <xMBPortTimersInit+0x28>)
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	8013      	strh	r3, [r2, #0]
	return TRUE;
 8002364:	2301      	movs	r3, #1
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	200003d0 	.word	0x200003d0
 8002374:	20000220 	.word	0x20000220

08002378 <vMBPortTimersEnable>:

inline void vMBPortTimersEnable() {
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	counter = 0;
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <vMBPortTimersEnable+0x18>)
 800237e:	2200      	movs	r2, #0
 8002380:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(tim);
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <vMBPortTimersEnable+0x1c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f001 fb4a 	bl	8003a20 <HAL_TIM_Base_Start_IT>
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000222 	.word	0x20000222
 8002394:	200003d0 	.word	0x200003d0

08002398 <vMBPortTimersDisable>:

inline void vMBPortTimersDisable() {
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(tim);
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <vMBPortTimersDisable+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f001 fb8f 	bl	8003ac4 <HAL_TIM_Base_Stop_IT>
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200003d0 	.word	0x200003d0

080023b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == tim->Instance) {
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d10e      	bne.n	80023e4 <HAL_TIM_PeriodElapsedCallback+0x34>
		if ((++counter) >= timeout)
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80023d2:	4619      	mov	r1, r3
 80023d4:	8011      	strh	r1, [r2, #0]
 80023d6:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80023d8:	8812      	ldrh	r2, [r2, #0]
 80023da:	4293      	cmp	r3, r2
 80023dc:	d302      	bcc.n	80023e4 <HAL_TIM_PeriodElapsedCallback+0x34>
			pxMBPortCBTimerExpired();
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4798      	blx	r3
	}
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200003d0 	.word	0x200003d0
 80023f0:	20000222 	.word	0x20000222
 80023f4:	20000220 	.word	0x20000220
 80023f8:	200003bc 	.word	0x200003bc

080023fc <usMBCRC16>:
		0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58,
		0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F,
		0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46,
		0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40 };

USHORT usMBCRC16(UCHAR *pucFrame, USHORT usLen) {
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
	UCHAR ucCRCHi = 0xFF;
 8002408:	23ff      	movs	r3, #255	; 0xff
 800240a:	73fb      	strb	r3, [r7, #15]
	UCHAR ucCRCLo = 0xFF;
 800240c:	23ff      	movs	r3, #255	; 0xff
 800240e:	73bb      	strb	r3, [r7, #14]
	int iIndex;

	while (usLen--) {
 8002410:	e013      	b.n	800243a <usMBCRC16+0x3e>
		iIndex = ucCRCLo ^ *(pucFrame++);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	7bbb      	ldrb	r3, [r7, #14]
 800241c:	4053      	eors	r3, r2
 800241e:	b2db      	uxtb	r3, r3
 8002420:	60bb      	str	r3, [r7, #8]
		ucCRCLo = (UCHAR) (ucCRCHi ^ aucCRCHi[iIndex]);
 8002422:	4a0f      	ldr	r2, [pc, #60]	; (8002460 <usMBCRC16+0x64>)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4413      	add	r3, r2
 8002428:	781a      	ldrb	r2, [r3, #0]
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	4053      	eors	r3, r2
 800242e:	73bb      	strb	r3, [r7, #14]
		ucCRCHi = aucCRCLo[iIndex];
 8002430:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <usMBCRC16+0x68>)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4413      	add	r3, r2
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	73fb      	strb	r3, [r7, #15]
	while (usLen--) {
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	1e5a      	subs	r2, r3, #1
 800243e:	807a      	strh	r2, [r7, #2]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1e6      	bne.n	8002412 <usMBCRC16+0x16>
	}
	return (USHORT) (ucCRCHi << 8 | ucCRCLo);
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	b21a      	sxth	r2, r3
 800244a:	7bbb      	ldrb	r3, [r7, #14]
 800244c:	b21b      	sxth	r3, r3
 800244e:	4313      	orrs	r3, r2
 8002450:	b21b      	sxth	r3, r3
 8002452:	b29b      	uxth	r3, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	080050ac 	.word	0x080050ac
 8002464:	080051ac 	.word	0x080051ac

08002468 <eMBRTUInit>:

static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode eMBRTUInit(UCHAR ucSlaveAddress, void *dHUART, ULONG ulBaudRate,
		void *dHTIM) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	4603      	mov	r3, r0
 8002476:	73fb      	strb	r3, [r7, #15]
	eMBErrorCode eStatus = MB_ENOERR;
 8002478:	2300      	movs	r3, #0
 800247a:	75fb      	strb	r3, [r7, #23]
	ULONG usTimerT35_50us;

	(void) ucSlaveAddress;
	ENTER_CRITICAL_SECTION();
 800247c:	f7ff fe5e 	bl	800213c <__critical_enter>
	/* Modbus RTU uses 8 Databits. */
	if (xMBPortSerialInit(dHUART, ulBaudRate, dHTIM) != TRUE) {
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68b8      	ldr	r0, [r7, #8]
 8002486:	f7ff febd 	bl	8002204 <xMBPortSerialInit>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d002      	beq.n	8002496 <eMBRTUInit+0x2e>
		eStatus = MB_EPORTERR;
 8002490:	2303      	movs	r3, #3
 8002492:	75fb      	strb	r3, [r7, #23]
 8002494:	e017      	b.n	80024c6 <eMBRTUInit+0x5e>
	} else {
		/* If baudrate > 19200 then we should use the fixed timer values
		 * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
		 */
		if (ulBaudRate > 19200) {
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800249c:	d902      	bls.n	80024a4 <eMBRTUInit+0x3c>
			usTimerT35_50us = 35; /* 1800us. */
 800249e:	2323      	movs	r3, #35	; 0x23
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	e005      	b.n	80024b0 <eMBRTUInit+0x48>
			 *             = 11 * Ticks_per_1s / Baudrate
			 *             = 220000 / Baudrate
			 * The reload for t3.5 is 1.5 times this value and similary
			 * for t3.5.
			 */
			usTimerT35_50us = (7UL * 220000UL) / (2UL * ulBaudRate);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <eMBRTUInit+0x6c>)
 80024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ae:	613b      	str	r3, [r7, #16]
		}
		if (xMBPortTimersInit((USHORT) usTimerT35_50us, dHTIM) != TRUE) {
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	6839      	ldr	r1, [r7, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff48 	bl	800234c <xMBPortTimersInit>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d001      	beq.n	80024c6 <eMBRTUInit+0x5e>
			eStatus = MB_EPORTERR;
 80024c2:	2303      	movs	r3, #3
 80024c4:	75fb      	strb	r3, [r7, #23]
		}
	}
	EXIT_CRITICAL_SECTION();
 80024c6:	f7ff fe49 	bl	800215c <__critical_exit>

	return eStatus;
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	00177fa0 	.word	0x00177fa0

080024d8 <eMBRTUStart>:

void eMBRTUStart(void) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
	ENTER_CRITICAL_SECTION();
 80024dc:	f7ff fe2e 	bl	800213c <__critical_enter>
	/* Initially the receiver is in the state STATE_RX_INIT. we start
	 * the timer and if no character is received within t3.5 we change
	 * to STATE_RX_IDLE. This makes sure that we delay startup of the
	 * modbus protocol stack until the bus is free.
	 */
	eRcvState = STATE_RX_INIT;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <eMBRTUStart+0x24>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
	vMBPortSerialEnable( TRUE, FALSE);
 80024e6:	2100      	movs	r1, #0
 80024e8:	2001      	movs	r0, #1
 80024ea:	f7ff fe9d 	bl	8002228 <vMBPortSerialEnable>
	vMBPortTimersEnable();
 80024ee:	f7ff ff43 	bl	8002378 <vMBPortTimersEnable>

	EXIT_CRITICAL_SECTION();
 80024f2:	f7ff fe33 	bl	800215c <__critical_exit>
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000225 	.word	0x20000225

08002500 <eMBRTUStop>:

void eMBRTUStop(void) {
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	ENTER_CRITICAL_SECTION();
 8002504:	f7ff fe1a 	bl	800213c <__critical_enter>
	vMBPortSerialEnable( FALSE, FALSE);
 8002508:	2100      	movs	r1, #0
 800250a:	2000      	movs	r0, #0
 800250c:	f7ff fe8c 	bl	8002228 <vMBPortSerialEnable>
	vMBPortTimersDisable();
 8002510:	f7ff ff42 	bl	8002398 <vMBPortTimersDisable>
	EXIT_CRITICAL_SECTION();
 8002514:	f7ff fe22 	bl	800215c <__critical_exit>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <eMBRTUReceive>:

eMBErrorCode eMBRTUReceive(UCHAR *pucRcvAddress, UCHAR **pucFrame,
		USHORT *pusLength) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
	eMBErrorCode eStatus = MB_ENOERR;
 8002528:	2300      	movs	r3, #0
 800252a:	75fb      	strb	r3, [r7, #23]

	ENTER_CRITICAL_SECTION();
 800252c:	f7ff fe06 	bl	800213c <__critical_enter>
	assert_param(usRcvBufferPos < MB_SER_PDU_SIZE_MAX);

	/* Length and CRC check */
	if ((usRcvBufferPos >= MB_SER_PDU_SIZE_MIN)
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <eMBRTUReceive+0x64>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b03      	cmp	r3, #3
 8002538:	d919      	bls.n	800256e <eMBRTUReceive+0x52>
			&& (usMBCRC16((UCHAR*) ucRTUBuf, usRcvBufferPos) == 0)) {
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <eMBRTUReceive+0x64>)
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	4619      	mov	r1, r3
 8002542:	4810      	ldr	r0, [pc, #64]	; (8002584 <eMBRTUReceive+0x68>)
 8002544:	f7ff ff5a 	bl	80023fc <usMBCRC16>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10f      	bne.n	800256e <eMBRTUReceive+0x52>
		/* Save the address field. All frames are passed to the upper layed
		 * and the decision if a frame is used is done there.
		 */
		*pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <eMBRTUReceive+0x68>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	701a      	strb	r2, [r3, #0]

		/* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
		 * size of address field and CRC checksum.
		 */
		*pusLength = (USHORT) (usRcvBufferPos - MB_SER_PDU_PDU_OFF
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <eMBRTUReceive+0x64>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b03      	subs	r3, #3
 8002560:	b29a      	uxth	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	801a      	strh	r2, [r3, #0]
				- MB_SER_PDU_SIZE_CRC);

		/* Return the start of the Modbus PDU to the caller. */
		*pucFrame = (UCHAR*) &ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4a07      	ldr	r2, [pc, #28]	; (8002588 <eMBRTUReceive+0x6c>)
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	e001      	b.n	8002572 <eMBRTUReceive+0x56>
	} else {
		eStatus = MB_EIO;
 800256e:	2305      	movs	r3, #5
 8002570:	75fb      	strb	r3, [r7, #23]
	}

	EXIT_CRITICAL_SECTION();
 8002572:	f7ff fdf3 	bl	800215c <__critical_exit>
	return eStatus;
 8002576:	7dfb      	ldrb	r3, [r7, #23]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	2000022e 	.word	0x2000022e
 8002584:	200003d4 	.word	0x200003d4
 8002588:	200003d5 	.word	0x200003d5

0800258c <eMBRTUSend>:

eMBErrorCode eMBRTUSend(UCHAR ucSlaveAddress, const UCHAR *pucFrame,
		USHORT usLength) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	71fb      	strb	r3, [r7, #7]
 8002598:	4613      	mov	r3, r2
 800259a:	80bb      	strh	r3, [r7, #4]
	eMBErrorCode eStatus = MB_ENOERR;
 800259c:	2300      	movs	r3, #0
 800259e:	73fb      	strb	r3, [r7, #15]
	USHORT usCRC16;

	ENTER_CRITICAL_SECTION();
 80025a0:	f7ff fdcc 	bl	800213c <__critical_enter>

	/* Check if the receiver is still in idle state. If not we where to
	 * slow with processing the received frame and the master sent another
	 * frame on the network. We have to abort sending the frame.
	 */
	if (eRcvState == STATE_RX_IDLE) {
 80025a4:	4b26      	ldr	r3, [pc, #152]	; (8002640 <eMBRTUSend+0xb4>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d13f      	bne.n	800262e <eMBRTUSend+0xa2>
		/* First byte before the Modbus-PDU is the slave address. */
		pucSndBufferCur = (UCHAR*) pucFrame - 1;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	4a24      	ldr	r2, [pc, #144]	; (8002644 <eMBRTUSend+0xb8>)
 80025b4:	6013      	str	r3, [r2, #0]
		usSndBufferCount = 1;
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <eMBRTUSend+0xbc>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	801a      	strh	r2, [r3, #0]

		/* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
		pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 80025bc:	4b21      	ldr	r3, [pc, #132]	; (8002644 <eMBRTUSend+0xb8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	79fa      	ldrb	r2, [r7, #7]
 80025c2:	701a      	strb	r2, [r3, #0]
		usSndBufferCount += usLength;
 80025c4:	4b20      	ldr	r3, [pc, #128]	; (8002648 <eMBRTUSend+0xbc>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	88bb      	ldrh	r3, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <eMBRTUSend+0xbc>)
 80025d2:	801a      	strh	r2, [r3, #0]

		/* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
		usCRC16 = usMBCRC16((UCHAR*) pucSndBufferCur, usSndBufferCount);
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <eMBRTUSend+0xb8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1b      	ldr	r2, [pc, #108]	; (8002648 <eMBRTUSend+0xbc>)
 80025da:	8812      	ldrh	r2, [r2, #0]
 80025dc:	b292      	uxth	r2, r2
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff0b 	bl	80023fc <usMBCRC16>
 80025e6:	4603      	mov	r3, r0
 80025e8:	81bb      	strh	r3, [r7, #12]
		ucRTUBuf[usSndBufferCount++] = (UCHAR) (usCRC16 & 0xFF);
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <eMBRTUSend+0xbc>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	b291      	uxth	r1, r2
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <eMBRTUSend+0xbc>)
 80025f6:	8011      	strh	r1, [r2, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	89bb      	ldrh	r3, [r7, #12]
 80025fc:	b2d9      	uxtb	r1, r3
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <eMBRTUSend+0xc0>)
 8002600:	5499      	strb	r1, [r3, r2]
		ucRTUBuf[usSndBufferCount++] = (UCHAR) (usCRC16 >> 8);
 8002602:	89bb      	ldrh	r3, [r7, #12]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	b299      	uxth	r1, r3
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <eMBRTUSend+0xbc>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	b290      	uxth	r0, r2
 8002612:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <eMBRTUSend+0xbc>)
 8002614:	8010      	strh	r0, [r2, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	b2c9      	uxtb	r1, r1
 800261a:	4b0c      	ldr	r3, [pc, #48]	; (800264c <eMBRTUSend+0xc0>)
 800261c:	5499      	strb	r1, [r3, r2]

		/* Activate the transmitter. */
		eSndState = STATE_TX_XMIT;
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <eMBRTUSend+0xc4>)
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
		vMBPortSerialEnable( FALSE, TRUE);
 8002624:	2101      	movs	r1, #1
 8002626:	2000      	movs	r0, #0
 8002628:	f7ff fdfe 	bl	8002228 <vMBPortSerialEnable>
 800262c:	e001      	b.n	8002632 <eMBRTUSend+0xa6>
	} else {
		eStatus = MB_EIO;
 800262e:	2305      	movs	r3, #5
 8002630:	73fb      	strb	r3, [r7, #15]
	}
	EXIT_CRITICAL_SECTION();
 8002632:	f7ff fd93 	bl	800215c <__critical_exit>
	return eStatus;
 8002636:	7bfb      	ldrb	r3, [r7, #15]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000225 	.word	0x20000225
 8002644:	20000228 	.word	0x20000228
 8002648:	2000022c 	.word	0x2000022c
 800264c:	200003d4 	.word	0x200003d4
 8002650:	20000224 	.word	0x20000224

08002654 <xMBRTUReceiveFSM>:

BOOL xMBRTUReceiveFSM(void) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
	BOOL xTaskNeedSwitch = FALSE;
 800265a:	2300      	movs	r3, #0
 800265c:	71fb      	strb	r3, [r7, #7]
	UCHAR ucByte;

	assert_param(eSndState == STATE_TX_IDLE);

	/* Always read the character. */
	(void) xMBPortSerialGetByte((CHAR*) &ucByte);
 800265e:	1dbb      	adds	r3, r7, #6
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fe2f 	bl	80022c4 <xMBPortSerialGetByte>

	switch (eRcvState) {
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <xMBRTUReceiveFSM+0xa0>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b03      	cmp	r3, #3
 800266e:	d83c      	bhi.n	80026ea <xMBRTUReceiveFSM+0x96>
 8002670:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <xMBRTUReceiveFSM+0x24>)
 8002672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002676:	bf00      	nop
 8002678:	08002689 	.word	0x08002689
 800267c:	08002695 	.word	0x08002695
 8002680:	080026bd 	.word	0x080026bd
 8002684:	0800268f 	.word	0x0800268f
	/* If we have received a character in the init state we have to
	 * wait until the frame is finished.
	 */
	case STATE_RX_INIT:
		vMBPortTimersEnable();
 8002688:	f7ff fe76 	bl	8002378 <vMBPortTimersEnable>
		break;
 800268c:	e02d      	b.n	80026ea <xMBRTUReceiveFSM+0x96>

		/* In the error state we wait until all characters in the
		 * damaged frame are transmitted.
		 */
	case STATE_RX_ERROR:
		vMBPortTimersEnable();
 800268e:	f7ff fe73 	bl	8002378 <vMBPortTimersEnable>
		break;
 8002692:	e02a      	b.n	80026ea <xMBRTUReceiveFSM+0x96>
		/* In the idle state we wait for a new character. If a character
		 * is received the t1.5 and t3.5 timers are started and the
		 * receiver is in the state STATE_RX_RECEIVCE.
		 */
	case STATE_RX_IDLE:
		usRcvBufferPos = 0;
 8002694:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <xMBRTUReceiveFSM+0xa4>)
 8002696:	2200      	movs	r2, #0
 8002698:	801a      	strh	r2, [r3, #0]
		ucRTUBuf[usRcvBufferPos++] = ucByte;
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <xMBRTUReceiveFSM+0xa4>)
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	b291      	uxth	r1, r2
 80026a4:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <xMBRTUReceiveFSM+0xa4>)
 80026a6:	8011      	strh	r1, [r2, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	79b9      	ldrb	r1, [r7, #6]
 80026ac:	4b13      	ldr	r3, [pc, #76]	; (80026fc <xMBRTUReceiveFSM+0xa8>)
 80026ae:	5499      	strb	r1, [r3, r2]
		eRcvState = STATE_RX_RCV;
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <xMBRTUReceiveFSM+0xa0>)
 80026b2:	2202      	movs	r2, #2
 80026b4:	701a      	strb	r2, [r3, #0]

		/* Enable t3.5 timers. */
		vMBPortTimersEnable();
 80026b6:	f7ff fe5f 	bl	8002378 <vMBPortTimersEnable>
		break;
 80026ba:	e016      	b.n	80026ea <xMBRTUReceiveFSM+0x96>
		 * every character received. If more than the maximum possible
		 * number of bytes in a modbus frame is received the frame is
		 * ignored.
		 */
	case STATE_RX_RCV:
		if (usRcvBufferPos < MB_SER_PDU_SIZE_MAX) {
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <xMBRTUReceiveFSM+0xa4>)
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2bff      	cmp	r3, #255	; 0xff
 80026c4:	d80b      	bhi.n	80026de <xMBRTUReceiveFSM+0x8a>
			ucRTUBuf[usRcvBufferPos++] = ucByte;
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <xMBRTUReceiveFSM+0xa4>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	b291      	uxth	r1, r2
 80026d0:	4a09      	ldr	r2, [pc, #36]	; (80026f8 <xMBRTUReceiveFSM+0xa4>)
 80026d2:	8011      	strh	r1, [r2, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	79b9      	ldrb	r1, [r7, #6]
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <xMBRTUReceiveFSM+0xa8>)
 80026da:	5499      	strb	r1, [r3, r2]
 80026dc:	e002      	b.n	80026e4 <xMBRTUReceiveFSM+0x90>
		} else {
			eRcvState = STATE_RX_ERROR;
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <xMBRTUReceiveFSM+0xa0>)
 80026e0:	2203      	movs	r2, #3
 80026e2:	701a      	strb	r2, [r3, #0]
		}
		vMBPortTimersEnable();
 80026e4:	f7ff fe48 	bl	8002378 <vMBPortTimersEnable>
		break;
 80026e8:	bf00      	nop
	}
	return xTaskNeedSwitch;
 80026ea:	79fb      	ldrb	r3, [r7, #7]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000225 	.word	0x20000225
 80026f8:	2000022e 	.word	0x2000022e
 80026fc:	200003d4 	.word	0x200003d4

08002700 <xMBRTUTransmitFSM>:

BOOL xMBRTUTransmitFSM(void) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
	BOOL xNeedPoll = FALSE;
 8002706:	2300      	movs	r3, #0
 8002708:	71fb      	strb	r3, [r7, #7]

	assert_param(eRcvState == STATE_RX_IDLE);

	switch (eSndState) {
 800270a:	4b18      	ldr	r3, [pc, #96]	; (800276c <xMBRTUTransmitFSM+0x6c>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <xMBRTUTransmitFSM+0x1a>
 8002714:	2b01      	cmp	r3, #1
 8002716:	d005      	beq.n	8002724 <xMBRTUTransmitFSM+0x24>
 8002718:	e023      	b.n	8002762 <xMBRTUTransmitFSM+0x62>
	/* We should not get a transmitter event if the transmitter is in
	 * idle state.  */
	case STATE_TX_IDLE:
		/* enable receiver/disable transmitter. */
		vMBPortSerialEnable( TRUE, FALSE);
 800271a:	2100      	movs	r1, #0
 800271c:	2001      	movs	r0, #1
 800271e:	f7ff fd83 	bl	8002228 <vMBPortSerialEnable>
		break;
 8002722:	e01e      	b.n	8002762 <xMBRTUTransmitFSM+0x62>

	case STATE_TX_XMIT:
		/* check if we are finished. */
		if (usSndBufferCount != 0) {
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <xMBRTUTransmitFSM+0x70>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <xMBRTUTransmitFSM+0x48>
#if SEND_ALL_BYTES_IN_ONE_CALL > 0
			xMBPortSerialPutBytes(pucSndBufferCur, usSndBufferCount);
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <xMBRTUTransmitFSM+0x74>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <xMBRTUTransmitFSM+0x70>)
 8002734:	8812      	ldrh	r2, [r2, #0]
 8002736:	b292      	uxth	r2, r2
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fdae 	bl	800229c <xMBPortSerialPutBytes>
			usSndBufferCount = 0;
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <xMBRTUTransmitFSM+0x70>)
 8002742:	2200      	movs	r2, #0
 8002744:	801a      	strh	r2, [r3, #0]
			/* Disable transmitter. This prevents another transmit buffer
			 * empty interrupt. */
			vMBPortSerialEnable( TRUE, FALSE);
			eSndState = STATE_TX_IDLE;
		}
		break;
 8002746:	e00b      	b.n	8002760 <xMBRTUTransmitFSM+0x60>
			xNeedPoll = xMBPortEventPost(EV_FRAME_SENT);
 8002748:	2008      	movs	r0, #8
 800274a:	f7ff fd27 	bl	800219c <xMBPortEventPost>
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
			vMBPortSerialEnable( TRUE, FALSE);
 8002752:	2100      	movs	r1, #0
 8002754:	2001      	movs	r0, #1
 8002756:	f7ff fd67 	bl	8002228 <vMBPortSerialEnable>
			eSndState = STATE_TX_IDLE;
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <xMBRTUTransmitFSM+0x6c>)
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
		break;
 8002760:	bf00      	nop
	}

	return xNeedPoll;
 8002762:	79fb      	ldrb	r3, [r7, #7]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000224 	.word	0x20000224
 8002770:	2000022c 	.word	0x2000022c
 8002774:	20000228 	.word	0x20000228

08002778 <xMBRTUTimerT35Expired>:

BOOL xMBRTUTimerT35Expired(void) {
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
	BOOL xNeedPoll = FALSE;
 800277e:	2300      	movs	r3, #0
 8002780:	71fb      	strb	r3, [r7, #7]

	switch (eRcvState) {
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <xMBRTUTimerT35Expired+0x54>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b03      	cmp	r3, #3
 800278a:	d012      	beq.n	80027b2 <xMBRTUTimerT35Expired+0x3a>
 800278c:	2b03      	cmp	r3, #3
 800278e:	dc12      	bgt.n	80027b6 <xMBRTUTimerT35Expired+0x3e>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <xMBRTUTimerT35Expired+0x22>
 8002794:	2b02      	cmp	r3, #2
 8002796:	d006      	beq.n	80027a6 <xMBRTUTimerT35Expired+0x2e>
		/* Function called in an illegal state. */
	default:
		assert_param(
				(eRcvState == STATE_RX_INIT) || (eRcvState == STATE_RX_RCV)
						|| (eRcvState == STATE_RX_ERROR));
		break;
 8002798:	e00d      	b.n	80027b6 <xMBRTUTimerT35Expired+0x3e>
		xNeedPoll = xMBPortEventPost(EV_READY);
 800279a:	2001      	movs	r0, #1
 800279c:	f7ff fcfe 	bl	800219c <xMBPortEventPost>
 80027a0:	4603      	mov	r3, r0
 80027a2:	71fb      	strb	r3, [r7, #7]
		break;
 80027a4:	e008      	b.n	80027b8 <xMBRTUTimerT35Expired+0x40>
		xNeedPoll = xMBPortEventPost(EV_FRAME_RECEIVED);
 80027a6:	2002      	movs	r0, #2
 80027a8:	f7ff fcf8 	bl	800219c <xMBPortEventPost>
 80027ac:	4603      	mov	r3, r0
 80027ae:	71fb      	strb	r3, [r7, #7]
		break;
 80027b0:	e002      	b.n	80027b8 <xMBRTUTimerT35Expired+0x40>
		break;
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <xMBRTUTimerT35Expired+0x40>
		break;
 80027b6:	bf00      	nop
	}

	vMBPortTimersDisable();
 80027b8:	f7ff fdee 	bl	8002398 <vMBPortTimersDisable>
	eRcvState = STATE_RX_IDLE;
 80027bc:	4b03      	ldr	r3, [pc, #12]	; (80027cc <xMBRTUTimerT35Expired+0x54>)
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]

	return xNeedPoll;
 80027c2:	79fb      	ldrb	r3, [r7, #7]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000225 	.word	0x20000225

080027d0 <FbBlink>:
  STATE_ON    = 1, //Включить лампочку на заданное время.
  STATE_OFF   = 2  //Выключить лампочку на заданное время.
};

void FbBlink(struct DbBlink *p)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  //Версия 1. Универсальная версия с графом состояния.
  if (Reset) { //Сброс при перезагрузке.
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7b1b      	ldrb	r3, [r3, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <FbBlink+0x16>
    State1 = STATE_RESET;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	751a      	strb	r2, [r3, #20]
  }

  switch (State1) //Граф состояний.
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	7d1b      	ldrb	r3, [r3, #20]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d027      	beq.n	800283e <FbBlink+0x6e>
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	dc3c      	bgt.n	800286c <FbBlink+0x9c>
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <FbBlink+0x2c>
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d00a      	beq.n	8002810 <FbBlink+0x40>
 80027fa:	e037      	b.n	800286c <FbBlink+0x9c>
  {

    case STATE_RESET: //Сброс.
      Out = false;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	735a      	strb	r2, [r3, #13]
      Timer1 = 0;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
      State1 = STATE_ON;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	751a      	strb	r2, [r3, #20]
      break;
 800280e:	e034      	b.n	800287a <FbBlink+0xaa>

    case STATE_ON: //Включить лампочку на заданное время.
      Out = true;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	735a      	strb	r2, [r3, #13]
      Timer1 = Timer1 + Ts_ms;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	441a      	add	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	611a      	str	r2, [r3, #16]
      if (Timer1 >= Time_on_ms) {
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d321      	bcc.n	8002874 <FbBlink+0xa4>
        State1 = STATE_OFF;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	751a      	strb	r2, [r3, #20]
        Timer1 = 0;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
      }
      break;
 800283c:	e01a      	b.n	8002874 <FbBlink+0xa4>

    case STATE_OFF: //Выключить лампочку на заданное время.
      Out = false;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	735a      	strb	r2, [r3, #13]
      Timer1 = Timer1 + Ts_ms;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	441a      	add	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	611a      	str	r2, [r3, #16]
      if (Timer1 >= Time_off_ms) {
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	d30c      	bcc.n	8002878 <FbBlink+0xa8>
        State1 = STATE_ON;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	751a      	strb	r2, [r3, #20]
        Timer1 = 0;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	611a      	str	r2, [r3, #16]
      }
      break;
 800286a:	e005      	b.n	8002878 <FbBlink+0xa8>

    default: //RESET при неопределенном состоянии.
      State1 = STATE_RESET;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	751a      	strb	r2, [r3, #20]
      break;
 8002872:	e002      	b.n	800287a <FbBlink+0xaa>
      break;
 8002874:	bf00      	nop
 8002876:	e000      	b.n	800287a <FbBlink+0xaa>
      break;
 8002878:	bf00      	nop
    Timer1 = (Timer1 + Ts_ms) * ((Timer1 <= (Time_on_ms + Time_off_ms)) and not(Reset));
    //Формируем время импульса.
    Out = (Timer1 <= Time_on_ms);
  */

  return;
 800287a:	bf00      	nop
}
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <FbFilterA>:
#define Tf  p->Tf
#define Ts  p->Ts
#define Out p->Out

void FbFilterA(struct DbFilterA *p)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  //Внутренние переменные, не сохраняемые.
  float Tmp; //Временная переменная вход интегратора.

  //W(s) = 1 / (1 + Tf * s) при Ts->0.
  if (Tf <= 0.0)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f04f 0100 	mov.w	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fb2f 	bl	8000ef8 <__aeabi_fcmple>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d004      	beq.n	80028aa <FbFilterA+0x26>
  {
    Out = In;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	60da      	str	r2, [r3, #12]
  {
    Tmp = (In - Out) / Tf;
    Out = Out + Tmp * Ts;
  }

  return;
 80028a8:	e023      	b.n	80028f2 <FbFilterA+0x6e>
    Tmp = (In - Out) / Tf;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f7fe f86d 	bl	8000994 <__aeabi_fsub>
 80028ba:	4603      	mov	r3, r0
 80028bc:	461a      	mov	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f7fe fa23 	bl	8000d10 <__aeabi_fdiv>
 80028ca:	4603      	mov	r3, r0
 80028cc:	60fb      	str	r3, [r7, #12]
    Out = Out + Tmp * Ts;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68dc      	ldr	r4, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	68f9      	ldr	r1, [r7, #12]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe f965 	bl	8000ba8 <__aeabi_fmul>
 80028de:	4603      	mov	r3, r0
 80028e0:	4619      	mov	r1, r3
 80028e2:	4620      	mov	r0, r4
 80028e4:	f7fe f858 	bl	8000998 <__addsf3>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	60da      	str	r2, [r3, #12]
  return;
 80028f0:	bf00      	nop
}
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}

080028f8 <FbTs>:
#define Uptime_s         p->Uptime_s
#define Time_previous_ms p->Time_previous_ms
#define Uptime_ms        p->Uptime_ms

void FbTs(struct DbTs *p)
{
 80028f8:	b5b0      	push	{r4, r5, r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  //Инициализация при первом старте.
  if (Reset)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	791b      	ldrb	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d011      	beq.n	800292c <FbTs+0x34>
  {
    Time_previous_ms = millis;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	619a      	str	r2, [r3, #24]
    Ts_ms = millis;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	609a      	str	r2, [r3, #8]
    Ts = 0.0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	60da      	str	r2, [r3, #12]
    Ts_ms_max = 0;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
    Uptime_s = 0;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	615a      	str	r2, [r3, #20]
  }

  //Рассчет шага дискретизации по времени [мс].
  if (Time_previous_ms <= millis)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699a      	ldr	r2, [r3, #24]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d807      	bhi.n	8002948 <FbTs+0x50>
  {
    Ts_ms = millis - Time_previous_ms; //разность времени без переполнения (займа).
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	1ad2      	subs	r2, r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	e006      	b.n	8002956 <FbTs+0x5e>
  }
  else
  {
    //Данное вычисление зависит от платформы надо перепроверить!
    Ts_ms = (0xFFFFFFFF - Time_previous_ms) + millis + 1; //разность времени при переполнении.
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	1ad2      	subs	r2, r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	609a      	str	r2, [r3, #8]
  //sizeof(uint32_t) = 4byte = 32bit
  //sizeof(uint64_t) = 8byte = 64bit
  //sizeof(float) = 4byte = 32bit
  //sizeof(double) = 8byte = 64bit

  Time_previous_ms = millis; //Запомнить предидущее состояние.
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	619a      	str	r2, [r3, #24]

  //Шаг дискретизации по времени [с].
  Ts = ((float)Ts_ms) * 0.001;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe f8c8 	bl	8000af8 <__aeabi_ui2f>
 8002968:	4603      	mov	r3, r0
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fd54 	bl	8000418 <__aeabi_f2d>
 8002970:	a31b      	add	r3, pc, #108	; (adr r3, 80029e0 <FbTs+0xe8>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	f7fd fda7 	bl	80004c8 <__aeabi_dmul>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	f7fd ffb3 	bl	80008ec <__aeabi_d2f>
 8002986:	4602      	mov	r2, r0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	60da      	str	r2, [r3, #12]

  //Максимальное время скана [мс].
  if (Ts_ms > Ts_ms_max)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	429a      	cmp	r2, r3
 8002996:	d903      	bls.n	80029a0 <FbTs+0xa8>
  {
    Ts_ms_max = Ts_ms;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	611a      	str	r2, [r3, #16]
  }

  //Время в работе [мс].
  Uptime_ms = Uptime_ms + ((uint64_t)Ts_ms);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	461a      	mov	r2, r3
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	1884      	adds	r4, r0, r2
 80029b2:	eb41 0503 	adc.w	r5, r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	e9c3 4508 	strd	r4, r5, [r3, #32]
  //Время в работе [с].
  Uptime_s = (uint32_t)(Uptime_ms / 1000);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80029c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	f7fe fab3 	bl	8000f34 <__aeabi_uldivmod>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	615a      	str	r2, [r3, #20]

  return;
 80029d6:	bf00      	nop
}
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bdb0      	pop	{r4, r5, r7, pc}
 80029de:	bf00      	nop
 80029e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80029e4:	3f50624d 	.word	0x3f50624d

080029e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HAL_Init+0x28>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <HAL_Init+0x28>)
 80029f2:	f043 0310 	orr.w	r3, r3, #16
 80029f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f8:	2003      	movs	r0, #3
 80029fa:	f000 f923 	bl	8002c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f000 f808 	bl	8002a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a04:	f7fe fe3c 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40022000 	.word	0x40022000

08002a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_InitTick+0x54>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_InitTick+0x58>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f93b 	bl	8002cae <HAL_SYSTICK_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00e      	b.n	8002a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d80a      	bhi.n	8002a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f000 f903 	bl	8002c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a54:	4a06      	ldr	r2, [pc, #24]	; (8002a70 <HAL_InitTick+0x5c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	2000008c 	.word	0x2000008c
 8002a70:	20000088 	.word	0x20000088

08002a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_IncTick+0x1c>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_IncTick+0x20>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a03      	ldr	r2, [pc, #12]	; (8002a94 <HAL_IncTick+0x20>)
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	2000008c 	.word	0x2000008c
 8002a94:	200004d4 	.word	0x200004d4

08002a98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a9c:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <HAL_GetTick+0x10>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	200004d4 	.word	0x200004d4

08002aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ade:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	60d3      	str	r3, [r2, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <__NVIC_GetPriorityGrouping+0x18>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	f003 0307 	and.w	r3, r3, #7
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	db0b      	blt.n	8002b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	4906      	ldr	r1, [pc, #24]	; (8002b44 <__NVIC_EnableIRQ+0x34>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2001      	movs	r0, #1
 8002b32:	fa00 f202 	lsl.w	r2, r0, r2
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	e000e100 	.word	0xe000e100

08002b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db0a      	blt.n	8002b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	490c      	ldr	r1, [pc, #48]	; (8002b94 <__NVIC_SetPriority+0x4c>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	0112      	lsls	r2, r2, #4
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b70:	e00a      	b.n	8002b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	4908      	ldr	r1, [pc, #32]	; (8002b98 <__NVIC_SetPriority+0x50>)
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	3b04      	subs	r3, #4
 8002b80:	0112      	lsls	r2, r2, #4
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	440b      	add	r3, r1
 8002b86:	761a      	strb	r2, [r3, #24]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000e100 	.word	0xe000e100
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f1c3 0307 	rsb	r3, r3, #7
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	bf28      	it	cs
 8002bba:	2304      	movcs	r3, #4
 8002bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	2b06      	cmp	r3, #6
 8002bc4:	d902      	bls.n	8002bcc <NVIC_EncodePriority+0x30>
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3b03      	subs	r3, #3
 8002bca:	e000      	b.n	8002bce <NVIC_EncodePriority+0x32>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	401a      	ands	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be4:	f04f 31ff 	mov.w	r1, #4294967295
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	43d9      	mvns	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	4313      	orrs	r3, r2
         );
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3724      	adds	r7, #36	; 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c10:	d301      	bcc.n	8002c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00f      	b.n	8002c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <SysTick_Config+0x40>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1e:	210f      	movs	r1, #15
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
 8002c24:	f7ff ff90 	bl	8002b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <SysTick_Config+0x40>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2e:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <SysTick_Config+0x40>)
 8002c30:	2207      	movs	r2, #7
 8002c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	e000e010 	.word	0xe000e010

08002c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff2d 	bl	8002aac <__NVIC_SetPriorityGrouping>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c6c:	f7ff ff42 	bl	8002af4 <__NVIC_GetPriorityGrouping>
 8002c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	6978      	ldr	r0, [r7, #20]
 8002c78:	f7ff ff90 	bl	8002b9c <NVIC_EncodePriority>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff5f 	bl	8002b48 <__NVIC_SetPriority>
}
 8002c8a:	bf00      	nop
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff35 	bl	8002b10 <__NVIC_EnableIRQ>
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ffa2 	bl	8002c00 <SysTick_Config>
 8002cbc:	4603      	mov	r3, r0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d008      	beq.n	8002cf0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e020      	b.n	8002d32 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 020e 	bic.w	r2, r2, #14
 8002cfe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d005      	beq.n	8002d60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2204      	movs	r2, #4
 8002d58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	e051      	b.n	8002e04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 020e 	bic.w	r2, r2, #14
 8002d6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <HAL_DMA_Abort_IT+0xd4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d029      	beq.n	8002dde <HAL_DMA_Abort_IT+0xa2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a21      	ldr	r2, [pc, #132]	; (8002e14 <HAL_DMA_Abort_IT+0xd8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d022      	beq.n	8002dda <HAL_DMA_Abort_IT+0x9e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <HAL_DMA_Abort_IT+0xdc>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01a      	beq.n	8002dd4 <HAL_DMA_Abort_IT+0x98>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1e      	ldr	r2, [pc, #120]	; (8002e1c <HAL_DMA_Abort_IT+0xe0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d012      	beq.n	8002dce <HAL_DMA_Abort_IT+0x92>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <HAL_DMA_Abort_IT+0xe4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00a      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x8c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1b      	ldr	r2, [pc, #108]	; (8002e24 <HAL_DMA_Abort_IT+0xe8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d102      	bne.n	8002dc2 <HAL_DMA_Abort_IT+0x86>
 8002dbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dc0:	e00e      	b.n	8002de0 <HAL_DMA_Abort_IT+0xa4>
 8002dc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dc6:	e00b      	b.n	8002de0 <HAL_DMA_Abort_IT+0xa4>
 8002dc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dcc:	e008      	b.n	8002de0 <HAL_DMA_Abort_IT+0xa4>
 8002dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd2:	e005      	b.n	8002de0 <HAL_DMA_Abort_IT+0xa4>
 8002dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dd8:	e002      	b.n	8002de0 <HAL_DMA_Abort_IT+0xa4>
 8002dda:	2310      	movs	r3, #16
 8002ddc:	e000      	b.n	8002de0 <HAL_DMA_Abort_IT+0xa4>
 8002dde:	2301      	movs	r3, #1
 8002de0:	4a11      	ldr	r2, [pc, #68]	; (8002e28 <HAL_DMA_Abort_IT+0xec>)
 8002de2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	4798      	blx	r3
    } 
  }
  return status;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40020008 	.word	0x40020008
 8002e14:	4002001c 	.word	0x4002001c
 8002e18:	40020030 	.word	0x40020030
 8002e1c:	40020044 	.word	0x40020044
 8002e20:	40020058 	.word	0x40020058
 8002e24:	4002006c 	.word	0x4002006c
 8002e28:	40020000 	.word	0x40020000

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b08b      	sub	sp, #44	; 0x2c
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3e:	e169      	b.n	8003114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e40:	2201      	movs	r2, #1
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	f040 8158 	bne.w	800310e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4a9a      	ldr	r2, [pc, #616]	; (80030cc <HAL_GPIO_Init+0x2a0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d05e      	beq.n	8002f26 <HAL_GPIO_Init+0xfa>
 8002e68:	4a98      	ldr	r2, [pc, #608]	; (80030cc <HAL_GPIO_Init+0x2a0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d875      	bhi.n	8002f5a <HAL_GPIO_Init+0x12e>
 8002e6e:	4a98      	ldr	r2, [pc, #608]	; (80030d0 <HAL_GPIO_Init+0x2a4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d058      	beq.n	8002f26 <HAL_GPIO_Init+0xfa>
 8002e74:	4a96      	ldr	r2, [pc, #600]	; (80030d0 <HAL_GPIO_Init+0x2a4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d86f      	bhi.n	8002f5a <HAL_GPIO_Init+0x12e>
 8002e7a:	4a96      	ldr	r2, [pc, #600]	; (80030d4 <HAL_GPIO_Init+0x2a8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d052      	beq.n	8002f26 <HAL_GPIO_Init+0xfa>
 8002e80:	4a94      	ldr	r2, [pc, #592]	; (80030d4 <HAL_GPIO_Init+0x2a8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d869      	bhi.n	8002f5a <HAL_GPIO_Init+0x12e>
 8002e86:	4a94      	ldr	r2, [pc, #592]	; (80030d8 <HAL_GPIO_Init+0x2ac>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d04c      	beq.n	8002f26 <HAL_GPIO_Init+0xfa>
 8002e8c:	4a92      	ldr	r2, [pc, #584]	; (80030d8 <HAL_GPIO_Init+0x2ac>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d863      	bhi.n	8002f5a <HAL_GPIO_Init+0x12e>
 8002e92:	4a92      	ldr	r2, [pc, #584]	; (80030dc <HAL_GPIO_Init+0x2b0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d046      	beq.n	8002f26 <HAL_GPIO_Init+0xfa>
 8002e98:	4a90      	ldr	r2, [pc, #576]	; (80030dc <HAL_GPIO_Init+0x2b0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d85d      	bhi.n	8002f5a <HAL_GPIO_Init+0x12e>
 8002e9e:	2b12      	cmp	r3, #18
 8002ea0:	d82a      	bhi.n	8002ef8 <HAL_GPIO_Init+0xcc>
 8002ea2:	2b12      	cmp	r3, #18
 8002ea4:	d859      	bhi.n	8002f5a <HAL_GPIO_Init+0x12e>
 8002ea6:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <HAL_GPIO_Init+0x80>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002f27 	.word	0x08002f27
 8002eb0:	08002f01 	.word	0x08002f01
 8002eb4:	08002f13 	.word	0x08002f13
 8002eb8:	08002f55 	.word	0x08002f55
 8002ebc:	08002f5b 	.word	0x08002f5b
 8002ec0:	08002f5b 	.word	0x08002f5b
 8002ec4:	08002f5b 	.word	0x08002f5b
 8002ec8:	08002f5b 	.word	0x08002f5b
 8002ecc:	08002f5b 	.word	0x08002f5b
 8002ed0:	08002f5b 	.word	0x08002f5b
 8002ed4:	08002f5b 	.word	0x08002f5b
 8002ed8:	08002f5b 	.word	0x08002f5b
 8002edc:	08002f5b 	.word	0x08002f5b
 8002ee0:	08002f5b 	.word	0x08002f5b
 8002ee4:	08002f5b 	.word	0x08002f5b
 8002ee8:	08002f5b 	.word	0x08002f5b
 8002eec:	08002f5b 	.word	0x08002f5b
 8002ef0:	08002f09 	.word	0x08002f09
 8002ef4:	08002f1d 	.word	0x08002f1d
 8002ef8:	4a79      	ldr	r2, [pc, #484]	; (80030e0 <HAL_GPIO_Init+0x2b4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002efe:	e02c      	b.n	8002f5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	623b      	str	r3, [r7, #32]
          break;
 8002f06:	e029      	b.n	8002f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	623b      	str	r3, [r7, #32]
          break;
 8002f10:	e024      	b.n	8002f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	3308      	adds	r3, #8
 8002f18:	623b      	str	r3, [r7, #32]
          break;
 8002f1a:	e01f      	b.n	8002f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	330c      	adds	r3, #12
 8002f22:	623b      	str	r3, [r7, #32]
          break;
 8002f24:	e01a      	b.n	8002f5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f2e:	2304      	movs	r3, #4
 8002f30:	623b      	str	r3, [r7, #32]
          break;
 8002f32:	e013      	b.n	8002f5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	611a      	str	r2, [r3, #16]
          break;
 8002f46:	e009      	b.n	8002f5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f48:	2308      	movs	r3, #8
 8002f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	615a      	str	r2, [r3, #20]
          break;
 8002f52:	e003      	b.n	8002f5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f54:	2300      	movs	r3, #0
 8002f56:	623b      	str	r3, [r7, #32]
          break;
 8002f58:	e000      	b.n	8002f5c <HAL_GPIO_Init+0x130>
          break;
 8002f5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2bff      	cmp	r3, #255	; 0xff
 8002f60:	d801      	bhi.n	8002f66 <HAL_GPIO_Init+0x13a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	e001      	b.n	8002f6a <HAL_GPIO_Init+0x13e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2bff      	cmp	r3, #255	; 0xff
 8002f70:	d802      	bhi.n	8002f78 <HAL_GPIO_Init+0x14c>
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	e002      	b.n	8002f7e <HAL_GPIO_Init+0x152>
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	3b08      	subs	r3, #8
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	210f      	movs	r1, #15
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	401a      	ands	r2, r3
 8002f90:	6a39      	ldr	r1, [r7, #32]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80b1 	beq.w	800310e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fac:	4b4d      	ldr	r3, [pc, #308]	; (80030e4 <HAL_GPIO_Init+0x2b8>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	4a4c      	ldr	r2, [pc, #304]	; (80030e4 <HAL_GPIO_Init+0x2b8>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6193      	str	r3, [r2, #24]
 8002fb8:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <HAL_GPIO_Init+0x2b8>)
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fc4:	4a48      	ldr	r2, [pc, #288]	; (80030e8 <HAL_GPIO_Init+0x2bc>)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	089b      	lsrs	r3, r3, #2
 8002fca:	3302      	adds	r3, #2
 8002fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	220f      	movs	r2, #15
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a40      	ldr	r2, [pc, #256]	; (80030ec <HAL_GPIO_Init+0x2c0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d013      	beq.n	8003018 <HAL_GPIO_Init+0x1ec>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a3f      	ldr	r2, [pc, #252]	; (80030f0 <HAL_GPIO_Init+0x2c4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00d      	beq.n	8003014 <HAL_GPIO_Init+0x1e8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3e      	ldr	r2, [pc, #248]	; (80030f4 <HAL_GPIO_Init+0x2c8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d007      	beq.n	8003010 <HAL_GPIO_Init+0x1e4>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a3d      	ldr	r2, [pc, #244]	; (80030f8 <HAL_GPIO_Init+0x2cc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d101      	bne.n	800300c <HAL_GPIO_Init+0x1e0>
 8003008:	2303      	movs	r3, #3
 800300a:	e006      	b.n	800301a <HAL_GPIO_Init+0x1ee>
 800300c:	2304      	movs	r3, #4
 800300e:	e004      	b.n	800301a <HAL_GPIO_Init+0x1ee>
 8003010:	2302      	movs	r3, #2
 8003012:	e002      	b.n	800301a <HAL_GPIO_Init+0x1ee>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <HAL_GPIO_Init+0x1ee>
 8003018:	2300      	movs	r3, #0
 800301a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301c:	f002 0203 	and.w	r2, r2, #3
 8003020:	0092      	lsls	r2, r2, #2
 8003022:	4093      	lsls	r3, r2
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800302a:	492f      	ldr	r1, [pc, #188]	; (80030e8 <HAL_GPIO_Init+0x2bc>)
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	3302      	adds	r3, #2
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003044:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	492c      	ldr	r1, [pc, #176]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	608b      	str	r3, [r1, #8]
 8003050:	e006      	b.n	8003060 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003052:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	43db      	mvns	r3, r3
 800305a:	4928      	ldr	r1, [pc, #160]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 800305c:	4013      	ands	r3, r2
 800305e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800306c:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	4922      	ldr	r1, [pc, #136]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	60cb      	str	r3, [r1, #12]
 8003078:	e006      	b.n	8003088 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	43db      	mvns	r3, r3
 8003082:	491e      	ldr	r1, [pc, #120]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 8003084:	4013      	ands	r3, r2
 8003086:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d006      	beq.n	80030a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	4918      	ldr	r1, [pc, #96]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	604b      	str	r3, [r1, #4]
 80030a0:	e006      	b.n	80030b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030a2:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	4914      	ldr	r1, [pc, #80]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d021      	beq.n	8003100 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030bc:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	490e      	ldr	r1, [pc, #56]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	600b      	str	r3, [r1, #0]
 80030c8:	e021      	b.n	800310e <HAL_GPIO_Init+0x2e2>
 80030ca:	bf00      	nop
 80030cc:	10320000 	.word	0x10320000
 80030d0:	10310000 	.word	0x10310000
 80030d4:	10220000 	.word	0x10220000
 80030d8:	10210000 	.word	0x10210000
 80030dc:	10120000 	.word	0x10120000
 80030e0:	10110000 	.word	0x10110000
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40010000 	.word	0x40010000
 80030ec:	40010800 	.word	0x40010800
 80030f0:	40010c00 	.word	0x40010c00
 80030f4:	40011000 	.word	0x40011000
 80030f8:	40011400 	.word	0x40011400
 80030fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_GPIO_Init+0x304>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	43db      	mvns	r3, r3
 8003108:	4909      	ldr	r1, [pc, #36]	; (8003130 <HAL_GPIO_Init+0x304>)
 800310a:	4013      	ands	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	3301      	adds	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	fa22 f303 	lsr.w	r3, r2, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	f47f ae8e 	bne.w	8002e40 <HAL_GPIO_Init+0x14>
  }
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	372c      	adds	r7, #44	; 0x2c
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr
 8003130:	40010400 	.word	0x40010400

08003134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
 8003140:	4613      	mov	r3, r2
 8003142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003144:	787b      	ldrb	r3, [r7, #1]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003150:	e003      	b.n	800315a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003152:	887b      	ldrh	r3, [r7, #2]
 8003154:	041a      	lsls	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	611a      	str	r2, [r3, #16]
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e26c      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8087 	beq.w	8003292 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003184:	4b92      	ldr	r3, [pc, #584]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b04      	cmp	r3, #4
 800318e:	d00c      	beq.n	80031aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003190:	4b8f      	ldr	r3, [pc, #572]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 030c 	and.w	r3, r3, #12
 8003198:	2b08      	cmp	r3, #8
 800319a:	d112      	bne.n	80031c2 <HAL_RCC_OscConfig+0x5e>
 800319c:	4b8c      	ldr	r3, [pc, #560]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a8:	d10b      	bne.n	80031c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031aa:	4b89      	ldr	r3, [pc, #548]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d06c      	beq.n	8003290 <HAL_RCC_OscConfig+0x12c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d168      	bne.n	8003290 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e246      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ca:	d106      	bne.n	80031da <HAL_RCC_OscConfig+0x76>
 80031cc:	4b80      	ldr	r3, [pc, #512]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a7f      	ldr	r2, [pc, #508]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	e02e      	b.n	8003238 <HAL_RCC_OscConfig+0xd4>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0x98>
 80031e2:	4b7b      	ldr	r3, [pc, #492]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a7a      	ldr	r2, [pc, #488]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	4b78      	ldr	r3, [pc, #480]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a77      	ldr	r2, [pc, #476]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e01d      	b.n	8003238 <HAL_RCC_OscConfig+0xd4>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0xbc>
 8003206:	4b72      	ldr	r3, [pc, #456]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a71      	ldr	r2, [pc, #452]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 800320c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b6f      	ldr	r3, [pc, #444]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a6e      	ldr	r2, [pc, #440]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0xd4>
 8003220:	4b6b      	ldr	r3, [pc, #428]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a6a      	ldr	r2, [pc, #424]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 8003226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b68      	ldr	r3, [pc, #416]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a67      	ldr	r2, [pc, #412]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 8003232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003236:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7ff fc2a 	bl	8002a98 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003248:	f7ff fc26 	bl	8002a98 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e1fa      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b5d      	ldr	r3, [pc, #372]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0xe4>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7ff fc16 	bl	8002a98 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003270:	f7ff fc12 	bl	8002a98 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1e6      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x10c>
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d063      	beq.n	8003366 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800329e:	4b4c      	ldr	r3, [pc, #304]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032aa:	4b49      	ldr	r3, [pc, #292]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d11c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x18c>
 80032b6:	4b46      	ldr	r3, [pc, #280]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d116      	bne.n	80032f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c2:	4b43      	ldr	r3, [pc, #268]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_RCC_OscConfig+0x176>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e1ba      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032da:	4b3d      	ldr	r3, [pc, #244]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4939      	ldr	r1, [pc, #228]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	e03a      	b.n	8003366 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f8:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7ff fbcb 	bl	8002a98 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003306:	f7ff fbc7 	bl	8002a98 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e19b      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003318:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003324:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4927      	ldr	r1, [pc, #156]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
 8003338:	e015      	b.n	8003366 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <HAL_RCC_OscConfig+0x270>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7ff fbaa 	bl	8002a98 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003348:	f7ff fba6 	bl	8002a98 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e17a      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d03a      	beq.n	80033e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d019      	beq.n	80033ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337a:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <HAL_RCC_OscConfig+0x274>)
 800337c:	2201      	movs	r2, #1
 800337e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003380:	f7ff fb8a 	bl	8002a98 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003388:	f7ff fb86 	bl	8002a98 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e15a      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <HAL_RCC_OscConfig+0x26c>)
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033a6:	2001      	movs	r0, #1
 80033a8:	f000 facc 	bl	8003944 <RCC_Delay>
 80033ac:	e01c      	b.n	80033e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_RCC_OscConfig+0x274>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b4:	f7ff fb70 	bl	8002a98 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ba:	e00f      	b.n	80033dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033bc:	f7ff fb6c 	bl	8002a98 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d908      	bls.n	80033dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e140      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000
 80033d4:	42420000 	.word	0x42420000
 80033d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033dc:	4b9e      	ldr	r3, [pc, #632]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e9      	bne.n	80033bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80a6 	beq.w	8003542 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f6:	2300      	movs	r3, #0
 80033f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fa:	4b97      	ldr	r3, [pc, #604]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10d      	bne.n	8003422 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003406:	4b94      	ldr	r3, [pc, #592]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	4a93      	ldr	r2, [pc, #588]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 800340c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003410:	61d3      	str	r3, [r2, #28]
 8003412:	4b91      	ldr	r3, [pc, #580]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003422:	4b8e      	ldr	r3, [pc, #568]	; (800365c <HAL_RCC_OscConfig+0x4f8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d118      	bne.n	8003460 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342e:	4b8b      	ldr	r3, [pc, #556]	; (800365c <HAL_RCC_OscConfig+0x4f8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a8a      	ldr	r2, [pc, #552]	; (800365c <HAL_RCC_OscConfig+0x4f8>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343a:	f7ff fb2d 	bl	8002a98 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003442:	f7ff fb29 	bl	8002a98 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b64      	cmp	r3, #100	; 0x64
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e0fd      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	4b81      	ldr	r3, [pc, #516]	; (800365c <HAL_RCC_OscConfig+0x4f8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d106      	bne.n	8003476 <HAL_RCC_OscConfig+0x312>
 8003468:	4b7b      	ldr	r3, [pc, #492]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4a7a      	ldr	r2, [pc, #488]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6213      	str	r3, [r2, #32]
 8003474:	e02d      	b.n	80034d2 <HAL_RCC_OscConfig+0x36e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x334>
 800347e:	4b76      	ldr	r3, [pc, #472]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	4a75      	ldr	r2, [pc, #468]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 8003484:	f023 0301 	bic.w	r3, r3, #1
 8003488:	6213      	str	r3, [r2, #32]
 800348a:	4b73      	ldr	r3, [pc, #460]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4a72      	ldr	r2, [pc, #456]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 8003490:	f023 0304 	bic.w	r3, r3, #4
 8003494:	6213      	str	r3, [r2, #32]
 8003496:	e01c      	b.n	80034d2 <HAL_RCC_OscConfig+0x36e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b05      	cmp	r3, #5
 800349e:	d10c      	bne.n	80034ba <HAL_RCC_OscConfig+0x356>
 80034a0:	4b6d      	ldr	r3, [pc, #436]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	4a6c      	ldr	r2, [pc, #432]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80034a6:	f043 0304 	orr.w	r3, r3, #4
 80034aa:	6213      	str	r3, [r2, #32]
 80034ac:	4b6a      	ldr	r3, [pc, #424]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4a69      	ldr	r2, [pc, #420]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6213      	str	r3, [r2, #32]
 80034b8:	e00b      	b.n	80034d2 <HAL_RCC_OscConfig+0x36e>
 80034ba:	4b67      	ldr	r3, [pc, #412]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	4a66      	ldr	r2, [pc, #408]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	6213      	str	r3, [r2, #32]
 80034c6:	4b64      	ldr	r3, [pc, #400]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	4a63      	ldr	r2, [pc, #396]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80034cc:	f023 0304 	bic.w	r3, r3, #4
 80034d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d015      	beq.n	8003506 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034da:	f7ff fadd 	bl	8002a98 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	e00a      	b.n	80034f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7ff fad9 	bl	8002a98 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e0ab      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	4b57      	ldr	r3, [pc, #348]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0ee      	beq.n	80034e2 <HAL_RCC_OscConfig+0x37e>
 8003504:	e014      	b.n	8003530 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003506:	f7ff fac7 	bl	8002a98 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350c:	e00a      	b.n	8003524 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350e:	f7ff fac3 	bl	8002a98 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	; 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e095      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003524:	4b4c      	ldr	r3, [pc, #304]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1ee      	bne.n	800350e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d105      	bne.n	8003542 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003536:	4b48      	ldr	r3, [pc, #288]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	4a47      	ldr	r2, [pc, #284]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 800353c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003540:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8081 	beq.w	800364e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800354c:	4b42      	ldr	r3, [pc, #264]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b08      	cmp	r3, #8
 8003556:	d061      	beq.n	800361c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d146      	bne.n	80035ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003560:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <HAL_RCC_OscConfig+0x4fc>)
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003566:	f7ff fa97 	bl	8002a98 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356e:	f7ff fa93 	bl	8002a98 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e067      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003580:	4b35      	ldr	r3, [pc, #212]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f0      	bne.n	800356e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003594:	d108      	bne.n	80035a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003596:	4b30      	ldr	r3, [pc, #192]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	492d      	ldr	r1, [pc, #180]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035a8:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a19      	ldr	r1, [r3, #32]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	430b      	orrs	r3, r1
 80035ba:	4927      	ldr	r1, [pc, #156]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c0:	4b27      	ldr	r3, [pc, #156]	; (8003660 <HAL_RCC_OscConfig+0x4fc>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c6:	f7ff fa67 	bl	8002a98 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ce:	f7ff fa63 	bl	8002a98 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e037      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x46a>
 80035ec:	e02f      	b.n	800364e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ee:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <HAL_RCC_OscConfig+0x4fc>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7ff fa50 	bl	8002a98 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7ff fa4c 	bl	8002a98 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e020      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x498>
 800361a:	e018      	b.n	800364e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e013      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_OscConfig+0x4f4>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	429a      	cmp	r2, r3
 800363a:	d106      	bne.n	800364a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d001      	beq.n	800364e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40021000 	.word	0x40021000
 800365c:	40007000 	.word	0x40007000
 8003660:	42420060 	.word	0x42420060

08003664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0d0      	b.n	800381a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003678:	4b6a      	ldr	r3, [pc, #424]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d910      	bls.n	80036a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b67      	ldr	r3, [pc, #412]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 0207 	bic.w	r2, r3, #7
 800368e:	4965      	ldr	r1, [pc, #404]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b63      	ldr	r3, [pc, #396]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0b8      	b.n	800381a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c0:	4b59      	ldr	r3, [pc, #356]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4a58      	ldr	r2, [pc, #352]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036d8:	4b53      	ldr	r3, [pc, #332]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a52      	ldr	r2, [pc, #328]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e4:	4b50      	ldr	r3, [pc, #320]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	494d      	ldr	r1, [pc, #308]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d040      	beq.n	8003784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d107      	bne.n	800371a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	4b47      	ldr	r3, [pc, #284]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d115      	bne.n	8003742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e07f      	b.n	800381a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003722:	4b41      	ldr	r3, [pc, #260]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e073      	b.n	800381a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003732:	4b3d      	ldr	r3, [pc, #244]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e06b      	b.n	800381a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003742:	4b39      	ldr	r3, [pc, #228]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f023 0203 	bic.w	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4936      	ldr	r1, [pc, #216]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003754:	f7ff f9a0 	bl	8002a98 <HAL_GetTick>
 8003758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	e00a      	b.n	8003772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800375c:	f7ff f99c 	bl	8002a98 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f241 3288 	movw	r2, #5000	; 0x1388
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e053      	b.n	800381a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	4b2d      	ldr	r3, [pc, #180]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 020c 	and.w	r2, r3, #12
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	429a      	cmp	r2, r3
 8003782:	d1eb      	bne.n	800375c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d210      	bcs.n	80037b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b24      	ldr	r3, [pc, #144]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 0207 	bic.w	r2, r3, #7
 800379a:	4922      	ldr	r1, [pc, #136]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e032      	b.n	800381a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4916      	ldr	r1, [pc, #88]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	490e      	ldr	r1, [pc, #56]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037f2:	f000 f821 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 80037f6:	4602      	mov	r2, r0
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	490a      	ldr	r1, [pc, #40]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 8003804:	5ccb      	ldrb	r3, [r1, r3]
 8003806:	fa22 f303 	lsr.w	r3, r2, r3
 800380a:	4a09      	ldr	r2, [pc, #36]	; (8003830 <HAL_RCC_ClockConfig+0x1cc>)
 800380c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <HAL_RCC_ClockConfig+0x1d0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff f8fe 	bl	8002a14 <HAL_InitTick>

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40022000 	.word	0x40022000
 8003828:	40021000 	.word	0x40021000
 800382c:	08005094 	.word	0x08005094
 8003830:	20000000 	.word	0x20000000
 8003834:	20000088 	.word	0x20000088

08003838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	2300      	movs	r3, #0
 800384c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003852:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b04      	cmp	r3, #4
 8003860:	d002      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x30>
 8003862:	2b08      	cmp	r3, #8
 8003864:	d003      	beq.n	800386e <HAL_RCC_GetSysClockFreq+0x36>
 8003866:	e027      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800386a:	613b      	str	r3, [r7, #16]
      break;
 800386c:	e027      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	0c9b      	lsrs	r3, r3, #18
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	4a17      	ldr	r2, [pc, #92]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003878:	5cd3      	ldrb	r3, [r2, r3]
 800387a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d010      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	0c5b      	lsrs	r3, r3, #17
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	4a11      	ldr	r2, [pc, #68]	; (80038d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003892:	5cd3      	ldrb	r3, [r2, r3]
 8003894:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a0d      	ldr	r2, [pc, #52]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800389a:	fb02 f203 	mul.w	r2, r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	e004      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a0c      	ldr	r2, [pc, #48]	; (80038dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80038ac:	fb02 f303 	mul.w	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	613b      	str	r3, [r7, #16]
      break;
 80038b6:	e002      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ba:	613b      	str	r3, [r7, #16]
      break;
 80038bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038be:	693b      	ldr	r3, [r7, #16]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	007a1200 	.word	0x007a1200
 80038d4:	080052ac 	.word	0x080052ac
 80038d8:	080052bc 	.word	0x080052bc
 80038dc:	003d0900 	.word	0x003d0900

080038e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e4:	4b02      	ldr	r3, [pc, #8]	; (80038f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr
 80038f0:	20000000 	.word	0x20000000

080038f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038f8:	f7ff fff2 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 80038fc:	4602      	mov	r2, r0
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	4903      	ldr	r1, [pc, #12]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800390a:	5ccb      	ldrb	r3, [r1, r3]
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40021000 	.word	0x40021000
 8003918:	080050a4 	.word	0x080050a4

0800391c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003920:	f7ff ffde 	bl	80038e0 <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	0adb      	lsrs	r3, r3, #11
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4903      	ldr	r1, [pc, #12]	; (8003940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000
 8003940:	080050a4 	.word	0x080050a4

08003944 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <RCC_Delay+0x34>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a0a      	ldr	r2, [pc, #40]	; (800397c <RCC_Delay+0x38>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	0a5b      	lsrs	r3, r3, #9
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003960:	bf00      	nop
  }
  while (Delay --);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1e5a      	subs	r2, r3, #1
 8003966:	60fa      	str	r2, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f9      	bne.n	8003960 <RCC_Delay+0x1c>
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	20000000 	.word	0x20000000
 800397c:	10624dd3 	.word	0x10624dd3

08003980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e041      	b.n	8003a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd fe9c 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 faa2 	bl	8003f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d001      	beq.n	8003a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e03a      	b.n	8003aae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <HAL_TIM_Base_Start_IT+0x98>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00e      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x58>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a62:	d009      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x58>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a14      	ldr	r2, [pc, #80]	; (8003abc <HAL_TIM_Base_Start_IT+0x9c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x58>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a13      	ldr	r2, [pc, #76]	; (8003ac0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d111      	bne.n	8003a9c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b06      	cmp	r3, #6
 8003a88:	d010      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0201 	orr.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9a:	e007      	b.n	8003aac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	40012c00 	.word	0x40012c00
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800

08003ac4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0201 	bic.w	r2, r2, #1
 8003ada:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6a1a      	ldr	r2, [r3, #32]
 8003ae2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10f      	bne.n	8003b0c <HAL_TIM_Base_Stop_IT+0x48>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6a1a      	ldr	r2, [r3, #32]
 8003af2:	f240 4344 	movw	r3, #1092	; 0x444
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d107      	bne.n	8003b0c <HAL_TIM_Base_Stop_IT+0x48>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d122      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d11b      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0202 	mvn.w	r2, #2
 8003b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f9b4 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8003b68:	e005      	b.n	8003b76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f9a7 	bl	8003ebe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f9b6 	bl	8003ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d122      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d11b      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0204 	mvn.w	r2, #4
 8003ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f98a 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8003bbc:	e005      	b.n	8003bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f97d 	bl	8003ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f98c 	bl	8003ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d122      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d11b      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0208 	mvn.w	r2, #8
 8003bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2204      	movs	r2, #4
 8003bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f960 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8003c10:	e005      	b.n	8003c1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f953 	bl	8003ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f962 	bl	8003ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b10      	cmp	r3, #16
 8003c30:	d122      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b10      	cmp	r3, #16
 8003c3e:	d11b      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0210 	mvn.w	r2, #16
 8003c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f936 	bl	8003ed0 <HAL_TIM_IC_CaptureCallback>
 8003c64:	e005      	b.n	8003c72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f929 	bl	8003ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f938 	bl	8003ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d10e      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d107      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0201 	mvn.w	r2, #1
 8003c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fe fb86 	bl	80023b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	2b80      	cmp	r3, #128	; 0x80
 8003cb0:	d10e      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbc:	2b80      	cmp	r3, #128	; 0x80
 8003cbe:	d107      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fa7b 	bl	80041c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d10e      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d107      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f8fc 	bl	8003ef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d10e      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d107      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0220 	mvn.w	r2, #32
 8003d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fa46 	bl	80041b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_TIM_ConfigClockSource+0x1c>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e0b4      	b.n	8003eb6 <HAL_TIM_ConfigClockSource+0x186>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d84:	d03e      	beq.n	8003e04 <HAL_TIM_ConfigClockSource+0xd4>
 8003d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8a:	f200 8087 	bhi.w	8003e9c <HAL_TIM_ConfigClockSource+0x16c>
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d92:	f000 8086 	beq.w	8003ea2 <HAL_TIM_ConfigClockSource+0x172>
 8003d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9a:	d87f      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x16c>
 8003d9c:	2b70      	cmp	r3, #112	; 0x70
 8003d9e:	d01a      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0xa6>
 8003da0:	2b70      	cmp	r3, #112	; 0x70
 8003da2:	d87b      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x16c>
 8003da4:	2b60      	cmp	r3, #96	; 0x60
 8003da6:	d050      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x11a>
 8003da8:	2b60      	cmp	r3, #96	; 0x60
 8003daa:	d877      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x16c>
 8003dac:	2b50      	cmp	r3, #80	; 0x50
 8003dae:	d03c      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0xfa>
 8003db0:	2b50      	cmp	r3, #80	; 0x50
 8003db2:	d873      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x16c>
 8003db4:	2b40      	cmp	r3, #64	; 0x40
 8003db6:	d058      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x13a>
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d86f      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x16c>
 8003dbc:	2b30      	cmp	r3, #48	; 0x30
 8003dbe:	d064      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x15a>
 8003dc0:	2b30      	cmp	r3, #48	; 0x30
 8003dc2:	d86b      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x16c>
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d060      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x15a>
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d867      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x16c>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d05c      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x15a>
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d05a      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x15a>
 8003dd4:	e062      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	6899      	ldr	r1, [r3, #8]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f000 f968 	bl	80040ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003df8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	609a      	str	r2, [r3, #8]
      break;
 8003e02:	e04f      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	6899      	ldr	r1, [r3, #8]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f000 f951 	bl	80040ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e26:	609a      	str	r2, [r3, #8]
      break;
 8003e28:	e03c      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6859      	ldr	r1, [r3, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f000 f8c8 	bl	8003fcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2150      	movs	r1, #80	; 0x50
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f91f 	bl	8004086 <TIM_ITRx_SetConfig>
      break;
 8003e48:	e02c      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6859      	ldr	r1, [r3, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	461a      	mov	r2, r3
 8003e58:	f000 f8e6 	bl	8004028 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2160      	movs	r1, #96	; 0x60
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f90f 	bl	8004086 <TIM_ITRx_SetConfig>
      break;
 8003e68:	e01c      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6859      	ldr	r1, [r3, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f000 f8a8 	bl	8003fcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2140      	movs	r1, #64	; 0x40
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f8ff 	bl	8004086 <TIM_ITRx_SetConfig>
      break;
 8003e88:	e00c      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f000 f8f6 	bl	8004086 <TIM_ITRx_SetConfig>
      break;
 8003e9a:	e003      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea0:	e000      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ea2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
	...

08003f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a29      	ldr	r2, [pc, #164]	; (8003fc0 <TIM_Base_SetConfig+0xb8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <TIM_Base_SetConfig+0x30>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f26:	d007      	beq.n	8003f38 <TIM_Base_SetConfig+0x30>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a26      	ldr	r2, [pc, #152]	; (8003fc4 <TIM_Base_SetConfig+0xbc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_Base_SetConfig+0x30>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a25      	ldr	r2, [pc, #148]	; (8003fc8 <TIM_Base_SetConfig+0xc0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d108      	bne.n	8003f4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <TIM_Base_SetConfig+0xb8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00b      	beq.n	8003f6a <TIM_Base_SetConfig+0x62>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f58:	d007      	beq.n	8003f6a <TIM_Base_SetConfig+0x62>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a19      	ldr	r2, [pc, #100]	; (8003fc4 <TIM_Base_SetConfig+0xbc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <TIM_Base_SetConfig+0x62>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <TIM_Base_SetConfig+0xc0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d108      	bne.n	8003f7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <TIM_Base_SetConfig+0xb8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d103      	bne.n	8003fb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	615a      	str	r2, [r3, #20]
}
 8003fb6:	bf00      	nop
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr
 8003fc0:	40012c00 	.word	0x40012c00
 8003fc4:	40000400 	.word	0x40000400
 8003fc8:	40000800 	.word	0x40000800

08003fcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f023 0201 	bic.w	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f023 030a 	bic.w	r3, r3, #10
 8004008:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	621a      	str	r2, [r3, #32]
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 0210 	bic.w	r2, r3, #16
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	031b      	lsls	r3, r3, #12
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004064:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	621a      	str	r2, [r3, #32]
}
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr

08004086 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004086:	b480      	push	{r7}
 8004088:	b085      	sub	sp, #20
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f043 0307 	orr.w	r3, r3, #7
 80040a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	609a      	str	r2, [r3, #8]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b087      	sub	sp, #28
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	021a      	lsls	r2, r3, #8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	431a      	orrs	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	609a      	str	r2, [r3, #8]
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800410c:	2302      	movs	r3, #2
 800410e:	e046      	b.n	800419e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a16      	ldr	r2, [pc, #88]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00e      	beq.n	8004172 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415c:	d009      	beq.n	8004172 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a12      	ldr	r2, [pc, #72]	; (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d004      	beq.n	8004172 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a10      	ldr	r2, [pc, #64]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d10c      	bne.n	800418c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	4313      	orrs	r3, r2
 8004182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	40000400 	.word	0x40000400
 80041b0:	40000800 	.word	0x40000800

080041b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr

080041c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e042      	b.n	8004270 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fd fa96 	bl	8001730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2224      	movs	r2, #36	; 0x24
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800421a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fe65 	bl	8004eec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b20      	cmp	r3, #32
 8004290:	d121      	bne.n	80042d6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_UART_Transmit_IT+0x26>
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e01a      	b.n	80042d8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	88fa      	ldrh	r2, [r7, #6]
 80042ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	88fa      	ldrh	r2, [r7, #6]
 80042b2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2221      	movs	r2, #33	; 0x21
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	e000      	b.n	80042d8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80042d6:	2302      	movs	r3, #2
  }
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	4613      	mov	r3, r2
 80042ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d112      	bne.n	8004322 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_UART_Receive_IT+0x26>
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e00b      	b.n	8004324 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	461a      	mov	r2, r3
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fbe5 	bl	8004ae8 <UART_Start_Receive_IT>
 800431e:	4603      	mov	r3, r0
 8004320:	e000      	b.n	8004324 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
  }
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08e      	sub	sp, #56	; 0x38
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	330c      	adds	r3, #12
 800433a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	61fb      	str	r3, [r7, #28]
   return(result);
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800434a:	637b      	str	r3, [r7, #52]	; 0x34
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	330c      	adds	r3, #12
 8004352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004354:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800435a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e5      	bne.n	8004334 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b00      	cmp	r3, #0
 8004374:	d03c      	beq.n	80043f0 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3314      	adds	r3, #20
 800437c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	60bb      	str	r3, [r7, #8]
   return(result);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800438c:	633b      	str	r3, [r7, #48]	; 0x30
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004396:	61ba      	str	r2, [r7, #24]
 8004398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	6979      	ldr	r1, [r7, #20]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	613b      	str	r3, [r7, #16]
   return(result);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e5      	bne.n	8004376 <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d013      	beq.n	80043da <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	4a16      	ldr	r2, [pc, #88]	; (8004410 <HAL_UART_AbortTransmit_IT+0xe4>)
 80043b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe fcbc 	bl	8002d3c <HAL_DMA_Abort_IT>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01c      	beq.n	8004404 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043d4:	4610      	mov	r0, r2
 80043d6:	4798      	blx	r3
 80043d8:	e014      	b.n	8004404 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fb60 	bl	8004aae <HAL_UART_AbortTransmitCpltCallback>
 80043ee:	e009      	b.n	8004404 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fb55 	bl	8004aae <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3738      	adds	r7, #56	; 0x38
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	08004c47 	.word	0x08004c47

08004414 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b09a      	sub	sp, #104	; 0x68
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800442c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004432:	667b      	str	r3, [r7, #100]	; 0x64
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800443c:	657a      	str	r2, [r7, #84]	; 0x54
 800443e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004442:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800444a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e5      	bne.n	800441c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3314      	adds	r3, #20
 8004456:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004462:	f023 0301 	bic.w	r3, r3, #1
 8004466:	663b      	str	r3, [r7, #96]	; 0x60
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3314      	adds	r3, #20
 800446e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004470:	643a      	str	r2, [r7, #64]	; 0x40
 8004472:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004476:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e5      	bne.n	8004450 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	2b01      	cmp	r3, #1
 800448a:	d119      	bne.n	80044c0 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	330c      	adds	r3, #12
 8004492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	61fb      	str	r3, [r7, #28]
   return(result);
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f023 0310 	bic.w	r3, r3, #16
 80044a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e5      	bne.n	800448c <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d03f      	beq.n	800454e <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3314      	adds	r3, #20
 80044d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3314      	adds	r3, #20
 80044ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044ee:	61ba      	str	r2, [r7, #24]
 80044f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6979      	ldr	r1, [r7, #20]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	613b      	str	r3, [r7, #16]
   return(result);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e5      	bne.n	80044ce <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d013      	beq.n	8004532 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	4a19      	ldr	r2, [pc, #100]	; (8004574 <HAL_UART_AbortReceive_IT+0x160>)
 8004510:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fc10 	bl	8002d3c <HAL_DMA_Abort_IT>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d022      	beq.n	8004568 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800452c:	4610      	mov	r0, r2
 800452e:	4798      	blx	r3
 8004530:	e01a      	b.n	8004568 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 faba 	bl	8004ac0 <HAL_UART_AbortReceiveCpltCallback>
 800454c:	e00c      	b.n	8004568 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 faac 	bl	8004ac0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3768      	adds	r7, #104	; 0x68
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	08004c71 	.word	0x08004c71

08004578 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b0ba      	sub	sp, #232	; 0xe8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800459e:	2300      	movs	r3, #0
 80045a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10f      	bne.n	80045de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <HAL_UART_IRQHandler+0x66>
 80045ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fbc9 	bl	8004d6e <UART_Receive_IT>
      return;
 80045dc:	e25b      	b.n	8004a96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80de 	beq.w	80047a4 <HAL_UART_IRQHandler+0x22c>
 80045e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d106      	bne.n	8004602 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 80d1 	beq.w	80047a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <HAL_UART_IRQHandler+0xae>
 800460e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	f043 0201 	orr.w	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00b      	beq.n	800464a <HAL_UART_IRQHandler+0xd2>
 8004632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	f043 0202 	orr.w	r2, r3, #2
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800464a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00b      	beq.n	800466e <HAL_UART_IRQHandler+0xf6>
 8004656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	f043 0204 	orr.w	r2, r3, #4
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800466e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d011      	beq.n	800469e <HAL_UART_IRQHandler+0x126>
 800467a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d105      	bne.n	8004692 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f043 0208 	orr.w	r2, r3, #8
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 81f2 	beq.w	8004a8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_UART_IRQHandler+0x14e>
 80046b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fb54 	bl	8004d6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <HAL_UART_IRQHandler+0x17a>
 80046ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d04f      	beq.n	8004792 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fa31 	bl	8004b5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d041      	beq.n	800478a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3314      	adds	r3, #20
 800470c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800471c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3314      	adds	r3, #20
 800472e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004732:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800473e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800474a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1d9      	bne.n	8004706 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d013      	beq.n	8004782 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475e:	4a7e      	ldr	r2, [pc, #504]	; (8004958 <HAL_UART_IRQHandler+0x3e0>)
 8004760:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fae8 	bl	8002d3c <HAL_DMA_Abort_IT>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800477c:	4610      	mov	r0, r2
 800477e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004780:	e00e      	b.n	80047a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f98a 	bl	8004a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004788:	e00a      	b.n	80047a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f986 	bl	8004a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004790:	e006      	b.n	80047a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f982 	bl	8004a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800479e:	e175      	b.n	8004a8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a0:	bf00      	nop
    return;
 80047a2:	e173      	b.n	8004a8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	f040 814f 	bne.w	8004a4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8148 	beq.w	8004a4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8141 	beq.w	8004a4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047ca:	2300      	movs	r3, #0
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 80b6 	beq.w	800495c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 8145 	beq.w	8004a90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800480a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800480e:	429a      	cmp	r2, r3
 8004810:	f080 813e 	bcs.w	8004a90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800481a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b20      	cmp	r3, #32
 8004824:	f000 8088 	beq.w	8004938 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800483e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004846:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	330c      	adds	r3, #12
 8004850:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004854:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004858:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004860:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800486c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1d9      	bne.n	8004828 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3314      	adds	r3, #20
 800487a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800487e:	e853 3f00 	ldrex	r3, [r3]
 8004882:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004884:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3314      	adds	r3, #20
 8004894:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004898:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800489c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e1      	bne.n	8004874 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3314      	adds	r3, #20
 80048b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3314      	adds	r3, #20
 80048d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e3      	bne.n	80048b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	330c      	adds	r3, #12
 80048fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004900:	e853 3f00 	ldrex	r3, [r3]
 8004904:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004908:	f023 0310 	bic.w	r3, r3, #16
 800490c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	330c      	adds	r3, #12
 8004916:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800491a:	65ba      	str	r2, [r7, #88]	; 0x58
 800491c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1e3      	bne.n	80048f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe f9c7 	bl	8002cc6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004946:	b29b      	uxth	r3, r3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	b29b      	uxth	r3, r3
 800494c:	4619      	mov	r1, r3
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f8bf 	bl	8004ad2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004954:	e09c      	b.n	8004a90 <HAL_UART_IRQHandler+0x518>
 8004956:	bf00      	nop
 8004958:	08004c1f 	.word	0x08004c1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004964:	b29b      	uxth	r3, r3
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 808e 	beq.w	8004a94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8089 	beq.w	8004a94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004994:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004998:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049a6:	647a      	str	r2, [r7, #68]	; 0x44
 80049a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e3      	bne.n	8004982 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3314      	adds	r3, #20
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	623b      	str	r3, [r7, #32]
   return(result);
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3314      	adds	r3, #20
 80049da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049de:	633a      	str	r2, [r7, #48]	; 0x30
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e3      	bne.n	80049ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0310 	bic.w	r3, r3, #16
 8004a16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a24:	61fa      	str	r2, [r7, #28]
 8004a26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	69b9      	ldr	r1, [r7, #24]
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	617b      	str	r3, [r7, #20]
   return(result);
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e3      	bne.n	8004a00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a42:	4619      	mov	r1, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f844 	bl	8004ad2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a4a:	e023      	b.n	8004a94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d009      	beq.n	8004a6c <HAL_UART_IRQHandler+0x4f4>
 8004a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f91b 	bl	8004ca0 <UART_Transmit_IT>
    return;
 8004a6a:	e014      	b.n	8004a96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00e      	beq.n	8004a96 <HAL_UART_IRQHandler+0x51e>
 8004a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f95a 	bl	8004d3e <UART_EndTransmit_IT>
    return;
 8004a8a:	e004      	b.n	8004a96 <HAL_UART_IRQHandler+0x51e>
    return;
 8004a8c:	bf00      	nop
 8004a8e:	e002      	b.n	8004a96 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a90:	bf00      	nop
 8004a92:	e000      	b.n	8004a96 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a94:	bf00      	nop
  }
}
 8004a96:	37e8      	adds	r7, #232	; 0xe8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr

08004aae <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	460b      	mov	r3, r1
 8004adc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	4613      	mov	r3, r2
 8004af4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2222      	movs	r2, #34	; 0x22
 8004b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b2c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0201 	orr.w	r2, r2, #1
 8004b3c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0220 	orr.w	r2, r2, #32
 8004b4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr

08004b5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b095      	sub	sp, #84	; 0x54
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	330c      	adds	r3, #12
 8004b68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	330c      	adds	r3, #12
 8004b80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b82:	643a      	str	r2, [r7, #64]	; 0x40
 8004b84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e5      	bne.n	8004b62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3314      	adds	r3, #20
 8004b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	e853 3f00 	ldrex	r3, [r3]
 8004ba4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3314      	adds	r3, #20
 8004bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e5      	bne.n	8004b96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d119      	bne.n	8004c06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	e853 3f00 	ldrex	r3, [r3]
 8004be0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f023 0310 	bic.w	r3, r3, #16
 8004be8:	647b      	str	r3, [r7, #68]	; 0x44
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	330c      	adds	r3, #12
 8004bf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bf2:	61ba      	str	r2, [r7, #24]
 8004bf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	6979      	ldr	r1, [r7, #20]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e5      	bne.n	8004bd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c14:	bf00      	nop
 8004c16:	3754      	adds	r7, #84	; 0x54
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7ff ff2f 	bl	8004a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7ff ff23 	bl	8004aae <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c68:	bf00      	nop
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f7ff ff14 	bl	8004ac0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b21      	cmp	r3, #33	; 0x21
 8004cb2:	d13e      	bne.n	8004d32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbc:	d114      	bne.n	8004ce8 <UART_Transmit_IT+0x48>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d110      	bne.n	8004ce8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cda:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	1c9a      	adds	r2, r3, #2
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	621a      	str	r2, [r3, #32]
 8004ce6:	e008      	b.n	8004cfa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	1c59      	adds	r1, r3, #1
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6211      	str	r1, [r2, #32]
 8004cf2:	781a      	ldrb	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	4619      	mov	r1, r3
 8004d08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10f      	bne.n	8004d2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e000      	b.n	8004d34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d32:	2302      	movs	r3, #2
  }
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fd fae0 	bl	8002324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b08c      	sub	sp, #48	; 0x30
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b22      	cmp	r3, #34	; 0x22
 8004d80:	f040 80ae 	bne.w	8004ee0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8c:	d117      	bne.n	8004dbe <UART_Receive_IT+0x50>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d113      	bne.n	8004dbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	1c9a      	adds	r2, r3, #2
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28
 8004dbc:	e026      	b.n	8004e0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd0:	d007      	beq.n	8004de2 <UART_Receive_IT+0x74>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <UART_Receive_IT+0x82>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	e008      	b.n	8004e02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d15d      	bne.n	8004edc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0220 	bic.w	r2, r2, #32
 8004e2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0201 	bic.w	r2, r2, #1
 8004e4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d135      	bne.n	8004ed2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	330c      	adds	r3, #12
 8004e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f023 0310 	bic.w	r3, r3, #16
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	330c      	adds	r3, #12
 8004e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8c:	623a      	str	r2, [r7, #32]
 8004e8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	69f9      	ldr	r1, [r7, #28]
 8004e92:	6a3a      	ldr	r2, [r7, #32]
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e5      	bne.n	8004e6c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	2b10      	cmp	r3, #16
 8004eac:	d10a      	bne.n	8004ec4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff fe01 	bl	8004ad2 <HAL_UARTEx_RxEventCallback>
 8004ed0:	e002      	b.n	8004ed8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fd fa06 	bl	80022e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e002      	b.n	8004ee2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	e000      	b.n	8004ee2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ee0:	2302      	movs	r3, #2
  }
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3730      	adds	r7, #48	; 0x30
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f26:	f023 030c 	bic.w	r3, r3, #12
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	430b      	orrs	r3, r1
 8004f32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699a      	ldr	r2, [r3, #24]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a2c      	ldr	r2, [pc, #176]	; (8005000 <UART_SetConfig+0x114>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d103      	bne.n	8004f5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f54:	f7fe fce2 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	e002      	b.n	8004f62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f5c:	f7fe fcca 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004f60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009a      	lsls	r2, r3, #2
 8004f6c:	441a      	add	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	4a22      	ldr	r2, [pc, #136]	; (8005004 <UART_SetConfig+0x118>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	0119      	lsls	r1, r3, #4
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009a      	lsls	r2, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f98:	4b1a      	ldr	r3, [pc, #104]	; (8005004 <UART_SetConfig+0x118>)
 8004f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	2064      	movs	r0, #100	; 0x64
 8004fa2:	fb00 f303 	mul.w	r3, r0, r3
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	3332      	adds	r3, #50	; 0x32
 8004fac:	4a15      	ldr	r2, [pc, #84]	; (8005004 <UART_SetConfig+0x118>)
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb8:	4419      	add	r1, r3
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009a      	lsls	r2, r3, #2
 8004fc4:	441a      	add	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fd0:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <UART_SetConfig+0x118>)
 8004fd2:	fba3 0302 	umull	r0, r3, r3, r2
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	2064      	movs	r0, #100	; 0x64
 8004fda:	fb00 f303 	mul.w	r3, r0, r3
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	3332      	adds	r3, #50	; 0x32
 8004fe4:	4a07      	ldr	r2, [pc, #28]	; (8005004 <UART_SetConfig+0x118>)
 8004fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	f003 020f 	and.w	r2, r3, #15
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ff8:	bf00      	nop
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40013800 	.word	0x40013800
 8005004:	51eb851f 	.word	0x51eb851f

08005008 <__libc_init_array>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	2600      	movs	r6, #0
 800500c:	4d0c      	ldr	r5, [pc, #48]	; (8005040 <__libc_init_array+0x38>)
 800500e:	4c0d      	ldr	r4, [pc, #52]	; (8005044 <__libc_init_array+0x3c>)
 8005010:	1b64      	subs	r4, r4, r5
 8005012:	10a4      	asrs	r4, r4, #2
 8005014:	42a6      	cmp	r6, r4
 8005016:	d109      	bne.n	800502c <__libc_init_array+0x24>
 8005018:	f000 f830 	bl	800507c <_init>
 800501c:	2600      	movs	r6, #0
 800501e:	4d0a      	ldr	r5, [pc, #40]	; (8005048 <__libc_init_array+0x40>)
 8005020:	4c0a      	ldr	r4, [pc, #40]	; (800504c <__libc_init_array+0x44>)
 8005022:	1b64      	subs	r4, r4, r5
 8005024:	10a4      	asrs	r4, r4, #2
 8005026:	42a6      	cmp	r6, r4
 8005028:	d105      	bne.n	8005036 <__libc_init_array+0x2e>
 800502a:	bd70      	pop	{r4, r5, r6, pc}
 800502c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005030:	4798      	blx	r3
 8005032:	3601      	adds	r6, #1
 8005034:	e7ee      	b.n	8005014 <__libc_init_array+0xc>
 8005036:	f855 3b04 	ldr.w	r3, [r5], #4
 800503a:	4798      	blx	r3
 800503c:	3601      	adds	r6, #1
 800503e:	e7f2      	b.n	8005026 <__libc_init_array+0x1e>
 8005040:	080052c8 	.word	0x080052c8
 8005044:	080052c8 	.word	0x080052c8
 8005048:	080052c8 	.word	0x080052c8
 800504c:	080052cc 	.word	0x080052cc

08005050 <memcpy>:
 8005050:	440a      	add	r2, r1
 8005052:	4291      	cmp	r1, r2
 8005054:	f100 33ff 	add.w	r3, r0, #4294967295
 8005058:	d100      	bne.n	800505c <memcpy+0xc>
 800505a:	4770      	bx	lr
 800505c:	b510      	push	{r4, lr}
 800505e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005062:	4291      	cmp	r1, r2
 8005064:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005068:	d1f9      	bne.n	800505e <memcpy+0xe>
 800506a:	bd10      	pop	{r4, pc}

0800506c <memset>:
 800506c:	4603      	mov	r3, r0
 800506e:	4402      	add	r2, r0
 8005070:	4293      	cmp	r3, r2
 8005072:	d100      	bne.n	8005076 <memset+0xa>
 8005074:	4770      	bx	lr
 8005076:	f803 1b01 	strb.w	r1, [r3], #1
 800507a:	e7f9      	b.n	8005070 <memset+0x4>

0800507c <_init>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	bf00      	nop
 8005080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005082:	bc08      	pop	{r3}
 8005084:	469e      	mov	lr, r3
 8005086:	4770      	bx	lr

08005088 <_fini>:
 8005088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508a:	bf00      	nop
 800508c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508e:	bc08      	pop	{r3}
 8005090:	469e      	mov	lr, r3
 8005092:	4770      	bx	lr
